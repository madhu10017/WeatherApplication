package com.bayer.efm.hsp.database.dao;

import java.util.ArrayList;
import java.util.List;

import net.sqlcipher.Cursor;
import net.sqlcipher.SQLException;
import net.sqlcipher.database.SQLiteDatabase;
import net.sqlcipher.database.SQLiteStatement;
import android.content.ContentValues;
import android.util.Log;

import com.bayer.efm.hsp.database.dto.AgronomicalDTO;
import com.bayer.efm.hsp.database.dto.DTO;
import com.bayer.efm.hsp.utils.CommonMethods;

public final class AgronomicalDAO implements DAO 
{

	private static AgronomicalDAO agronomicalDAO;

	private AgronomicalDAO() {

	}

	public static AgronomicalDAO getInstance() 
	{
		if (agronomicalDAO == null)
			agronomicalDAO = new AgronomicalDAO();

		return agronomicalDAO;
	}

	@Override
	public boolean insert(SQLiteDatabase dbObject, List<DTO> list) 
	{
		try 
		{
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO AgronomicalCondition(idAgronomical,idPPI,idAgronomicalCondition,agronomicalDate,dateCreated,dateModified,syncFlag,actionFlag)VALUES (?,?,?,?,?,?,?,?)");

			int count = 1;

			for (DTO items : list) 
			{

				AgronomicalDTO dto = (AgronomicalDTO) items;
				stmt.bindString(count++, CommonMethods.getUUID());
				stmt.bindString(count++, dto.getIdPPI());
				stmt.bindString(count++, dto.getIdAgronomicalCondition());
				stmt.bindString(count++, dto.getAgronomicalDate());
				stmt.bindString(count++, dto.getCreatedOn());
				stmt.bindString(count++, dto.getModifiedOn());
				stmt.bindLong(count++, dto.getSyncFlag());
				stmt.bindLong(count++, dto.getActionFlag());
				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("AgronomicalDAO  -- insert", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}

	
	
	@Override
	public boolean delete(SQLiteDatabase dbObject, DTO dto) 
	{
		AgronomicalDTO dtoObj = (AgronomicalDTO) dto;
		try 
		{
			dbObject.compileStatement(
					"DELETE FROM AgronomicalCondition WHERE idPPI = '" + dtoObj.getIdPPI() + "'")
					.execute();

			return true;
		} catch (Exception e) {
			Log.e("AgronomicalDAO  -- delete", e.getMessage());
		}

		finally {
			dbObject.close();
		}
		return false;
	}

	public boolean update(SQLiteDatabase dbObject, DTO dto) 
	{
		try 
		{
			AgronomicalDTO dtoObj = (AgronomicalDTO) dto;
			
			String whereCls = "idAgronomical = '" + dtoObj.getIDPPIAgronomicalCondition() + "'";
			ContentValues cValues = new ContentValues();
			cValues.put("idAgronomicalCondition", dtoObj.getIdAgronomicalCondition());
			cValues.put("agronomicalDate", dtoObj.getAgronomicalDate());
			//cValues.put("dateCreated", dtoObj.getDateCreated());
			cValues.put("syncFlag", dtoObj.getSyncFlag());
			cValues.put("actionFlag", dtoObj.getActionFlag());
			dbObject.update("AgronomicalCondition", cValues, whereCls, null);

			return true;		} catch (SQLException e) {
			Log.e("AgronomicalDAO  -- update", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public List<DTO> getRecords(SQLiteDatabase dbObject) 
	{
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try 
		{
			cursor = dbObject.rawQuery("SELECT * FROM AgronomicalCondition", null);
			if (cursor.moveToFirst())
			{
				do
				{
					AgronomicalDTO dto = new AgronomicalDTO();
					dto.setIDPPIAgronomicalCondition(cursor.getString(count++));
					dto.setIdPPI(cursor.getString(count++));
					dto.setIdAgronomicalCondition(cursor.getString(count++));
					dto.setAgronomicalDate(cursor.getString(count++));
					dto.setCreatedOn(cursor.getString(count++));
					dto.setModifiedOn(cursor.getString(count++));
					dto.setSyncFlag(cursor.getInt(count++));
					dto.setActionFlag(cursor.getInt(count++));
					

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("AgronomicalDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}

	
	
	public List<DTO> getRecordsWithValues(SQLiteDatabase dbObject,
			String columnName, String columnValue) 
			{
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM AgronomicalCondition WHERE " + columnName
					+ " = '" + columnValue + "'", null);
			if (cursor.moveToFirst()) 
			{
				do 
				{
					AgronomicalDTO dto = new AgronomicalDTO();
					dto.setIDPPIAgronomicalCondition(cursor.getString(count++));
					dto.setIdPPI(cursor.getString(count++));
					dto.setIdAgronomicalCondition(cursor.getString(count++));
					dto.setAgronomicalDate(cursor.getString(count++));
					dto.setCreatedOn(cursor.getString(count++));
					dto.setModifiedOn(cursor.getString(count++));
					dto.setSyncFlag(cursor.getInt(count++));
					dto.setActionFlag(cursor.getInt(count++));

					instList.add(dto);
					
					count	= 0;
					
				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("AgronomicalDAO  -- getRecordsWithValues", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();
			dbObject.close();
		}

		return instList;
	}
	
	public boolean insertAll(SQLiteDatabase dbObject, List<AgronomicalDTO> list,String tablename) 
	{
		try 
		{
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO "+tablename+"(idAgronomical,idPPI,idAgronomicalCondition,agronomicalDate,dateCreated,dateModified,syncFlag,actionFlag)VALUES (?,?,?,?,?,?,?,?)");
			int count = 1;

			for (AgronomicalDTO dto : list) 
			{
				stmt.bindString(count++, dto.getIDPPIAgronomicalCondition());
				stmt.bindString(count++, dto.getIdPPI());
				stmt.bindString(count++, dto.getIdAgronomicalCondition()== null ? "" : dto.getIdAgronomicalCondition());
				stmt.bindString(count++, dto.getAgronomicalDate()		== null ? "" : dto.getAgronomicalDate());
				stmt.bindString(count++, dto.getCreatedOn()				== null ? "" : dto.getCreatedOn());
				stmt.bindString(count++, dto.getModifiedOn()			== null ? "" : dto.getModifiedOn());
				stmt.bindLong(count++, dto.getSyncFlag()				== null ? 1 : dto.getSyncFlag());
				stmt.bindLong(count++, dto.getActionFlag()				== null ? 1 : dto.getActionFlag());
				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("AgronomicalDAO  -- insertAll", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}

	
	public List<AgronomicalDTO> getTransactionalData(SQLiteDatabase dbObject) 
	{
		List<AgronomicalDTO> instList = new ArrayList<AgronomicalDTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try 
		{
			cursor = dbObject.rawQuery("SELECT * FROM AgronomicalCondition where syncFlag='0'", null);
			if (cursor.moveToFirst())
			{
				do
				{
					AgronomicalDTO dto = new AgronomicalDTO();
					dto.setIDPPIAgronomicalCondition(cursor.getString(count++));
					dto.setIdPPI(cursor.getString(count++));
					dto.setIdAgronomicalCondition(cursor.getString(count++));
					dto.setAgronomicalDate(cursor.getString(count++));
					dto.setCreatedOn(cursor.getString(count++));
					dto.setModifiedOn(cursor.getString(count++));
					dto.setSyncFlag(cursor.getInt(count++));
					dto.setActionFlag(cursor.getInt(count++));
					
					

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("AgronomicalDAO  -- getTransactionalData", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}
	
	public boolean updateTransactionalData(SQLiteDatabase dbObject)
	{
		try {

			String query ="UPDATE  AgronomicalCondition  set syncFlag='1'";
			dbObject.execSQL(query);    
			return true;
			
		} catch (SQLException e) {
			Log.e("AgronomicalDAO  -- updateTransactionalData", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}
	
	public List<AgronomicalDTO> getCompleteData(SQLiteDatabase dbObject) 
	{
		List<AgronomicalDTO> instList = new ArrayList<AgronomicalDTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try 
		{
			cursor = dbObject.rawQuery("SELECT * FROM AgronomicalCondition", null);
			if (cursor.moveToFirst())
			{
				do
				{
					AgronomicalDTO dto = new AgronomicalDTO();
					dto.setIDPPIAgronomicalCondition(cursor.getString(count++));
					dto.setIdPPI(cursor.getString(count++));
					dto.setIdAgronomicalCondition(cursor.getString(count++));
					dto.setAgronomicalDate(cursor.getString(count++));
					dto.setCreatedOn(cursor.getString(count++));
					dto.setModifiedOn(cursor.getString(count++));
					dto.setSyncFlag(cursor.getInt(count++));
					dto.setActionFlag(cursor.getInt(count++));
					
					

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("AgronomicalDAO  -- getCompleteData", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}
	
	public boolean insertPartialData(SQLiteDatabase dbObject) {
		try {
			String query ="INSERT OR REPLACE INTO AgronomicalCondition(idAgronomical,idPPI,idAgronomicalCondition,agronomicalDate,dateCreated,dateModified,syncFlag,actionFlag) SELECT t.idAgronomical,t.idPPI,t.idAgronomicalCondition,t.agronomicalDate,t.dateCreated,t.dateModified,t.syncFlag,t.actionFlag  FROM AgronomicalCondition_Temp t left join AgronomicalCondition o on o.idAgronomical=t.idAgronomical";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("AgronomicalDAO  -- insertPartial", e.getMessage());
		} finally {
			//dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}
	public boolean deleteAll(SQLiteDatabase dbObject) {
		try {
			String query ="DELETE   FROM AgronomicalCondition_Temp";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("AgronomicalDAO  -- deleteall", e.getMessage());
		} finally {
			
			dbObject.close();
		}
		return false;
		
	}
}

