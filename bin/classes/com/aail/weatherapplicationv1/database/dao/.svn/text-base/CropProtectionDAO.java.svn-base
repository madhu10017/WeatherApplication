/**
 * 
 */
package com.bayer.efm.hsp.database.dao;

import java.util.ArrayList;
import java.util.List;

import net.sqlcipher.database.SQLiteDatabase;
import net.sqlcipher.database.SQLiteStatement;
import android.content.ContentValues;
import net.sqlcipher.Cursor;
import net.sqlcipher.SQLException;
import android.util.Log;

import com.bayer.efm.hsp.database.dto.CropProtectionDTO;
import com.bayer.efm.hsp.database.dto.DTO;
import com.bayer.efm.hsp.utils.CommonMethods;

public class CropProtectionDAO implements DAO {

	private static CropProtectionDAO cropprotectionDAO;

	private CropProtectionDAO() {

	}

	public static CropProtectionDAO getInstance() {
		if (cropprotectionDAO == null)
			cropprotectionDAO = new CropProtectionDAO();

		return cropprotectionDAO;
	}

	@Override
	public boolean insert(SQLiteDatabase dbObject, List<DTO> list) {
		try {
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO CropProtection(idCropProtection,insectOrDiseaseName,dateOfSpray,remarks,idLand,idStages,photo,dateCreated,dateModified,actionFlag,syncFlag,chemicalName)VALUES (?,?,?,?,?,?,?,?,?,?,?,?)");

			
			int count = 1;

			for (DTO items : list) {
				
				CropProtectionDTO dto = (CropProtectionDTO) items;
				
				stmt.bindString(count++, CommonMethods.getUUID());
				stmt.bindString(count++, dto.getInsectOrDiseaseName());
				stmt.bindString(count++, dto.getDateOfSpray());
				stmt.bindString(count++, dto.getRemarks());
				stmt.bindString(count++, dto.getIdLand());
				stmt.bindString(count++, dto.getIdStages());
				stmt.bindString(count++, dto.getPhoto());
				stmt.bindString(count++, dto.getDateCreated());
				stmt.bindString(count++, dto.getDateModified());
				stmt.bindLong(count++,   dto.getActionFlag());
				stmt.bindLong(count++,   dto.getSyncFlag());
				stmt.bindString(count++, dto.getChemicalName());
				
				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("CropProtectionDAO  -- insert", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean delete(SQLiteDatabase dbObject, DTO dto) {
		CropProtectionDTO dtoObj = (CropProtectionDTO) dto;
		try {
			dbObject.compileStatement("DELETE FROM CropProtection WHERE idCropprotection = '"
							+ dtoObj.getIdCropProtection() + "'").execute();

			return true;
		} catch (Exception e) {
			Log.e("CropProtectionDAO  -- delete", e.getMessage());
		}

		finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean update(SQLiteDatabase dbObject, DTO dto) {
		try {
			CropProtectionDTO dtoObj = (CropProtectionDTO) dto;
			String whereCls = "idCropProtection = '"+ dtoObj.getIdCropProtection() + "'";

			ContentValues cValues = new ContentValues();
			
			cValues.put("insectOrDiseaseName",dtoObj.getInsectOrDiseaseName());
			cValues.put("dateOfSpray",dtoObj.getDateOfSpray());
			cValues.put("remarks",dtoObj.getRemarks());
			cValues.put("idLand",dtoObj.getIdLand());
			cValues.put("idStages",dtoObj.getIdStages());
			cValues.put("photo",dtoObj.getPhoto());
			//cValues.put("dateCreated",dtoObj.getDateCreated());
			cValues.put("dateModified",dtoObj.getDateModified());
			cValues.put("actionFlag",dtoObj.getActionFlag());
			cValues.put("syncFlag",dtoObj.getSyncFlag());
			cValues.put("chemicalName",dtoObj.getChemicalName());
				
			dbObject.update("CropProtection", cValues, whereCls, null);

			return true;
		} catch (SQLException e) {
			Log.e("CropProtectionDAO  -- update", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public List<DTO> getRecords(SQLiteDatabase dbObject) {
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM CropProtection", null);
			if (cursor.moveToFirst()) {
				do {
					CropProtectionDTO dto = new CropProtectionDTO();
					dto.setIdCropProtection(cursor.getString(count++));
					dto.setInsectOrDiseaseName(cursor.getString(count++));
					dto.setDateOfSpray(cursor.getString(count++));
					dto.setRemarks(cursor.getString(count++));
					dto.setIdLand(cursor.getString(count++));
					dto.setIdStages(cursor.getString(count++));
					dto.setPhoto(cursor.getString(count++));
					dto.setDateCreated(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));
					dto.setActionFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));
					dto.setChemicalName(cursor.getString(count++));

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("CropProtectionDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}

	@Override
	public List<DTO> getRecordsWithValues(SQLiteDatabase dbObject,
			String columnName, String columnValue) {
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM CropProtection WHERE "+ columnName + " = '" + columnValue + "'", null);
			if (cursor.moveToFirst()) {
				do {
					CropProtectionDTO dto = new CropProtectionDTO();
					
					dto.setIdCropProtection(cursor.getString(count++));
					dto.setInsectOrDiseaseName(cursor.getString(count++));
					dto.setDateOfSpray(cursor.getString(count++));
					dto.setRemarks(cursor.getString(count++));
					dto.setIdLand(cursor.getString(count++));
					dto.setIdStages(cursor.getString(count++));
					dto.setPhoto(cursor.getString(count++));
					dto.setDateCreated(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));
					dto.setActionFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));
					dto.setChemicalName(cursor.getString(count++));

					instList.add(dto);
					
					count	= 0;
					
				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("CropProtectionDAO  -- getRecordsWithValues", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();
			dbObject.close();
		}

		return instList;
	}
	
	public List<DTO> getRecordsByLandAndStage(SQLiteDatabase dbObject,String columnName, String columnValue) 
	{
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		String qry;
		int count	= 0;
		
		try {
				qry = "SELECT * FROM CropProtection WHERE "+ columnName + " = '" + columnValue + "'" ;
			
			cursor = dbObject.rawQuery(qry, null);
			if (cursor.moveToFirst()) {
				do {
					CropProtectionDTO dto = new CropProtectionDTO();
					
					dto.setIdCropProtection(cursor.getString(count++));
					dto.setInsectOrDiseaseName(cursor.getString(count++));
					dto.setDateOfSpray(cursor.getString(count++));
					dto.setRemarks(cursor.getString(count++));
					dto.setIdLand(cursor.getString(count++));
					dto.setIdStages(cursor.getString(count++));
					dto.setPhoto(cursor.getString(count++));
					dto.setDateCreated(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));
					dto.setActionFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));
					dto.setChemicalName(cursor.getString(count++));

					instList.add(dto);
					
					count	= 0;
					
				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("CropProtectionDAO  -- getRecordsWithValues", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();
			dbObject.close();
		}

		return instList;
	}
	
	public boolean insertAll(SQLiteDatabase dbObject, List<CropProtectionDTO> list,String tablename) {
		try {
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO "+tablename+"(idCropProtection,insectOrDiseaseName,dateOfSpray,remarks,idLand,idStages,photo,dateCreated,dateModified,actionFlag,syncFlag,chemicalName)VALUES (?,?,?,?,?,?,?,?,?,?,?,?)");
			int count = 1;

			for (CropProtectionDTO dto : list) 
			{
				stmt.bindString(count++, dto.getIdCropProtection());
				stmt.bindString(count++, dto.getInsectOrDiseaseName()	== null ? "" :dto.getInsectOrDiseaseName());
				stmt.bindString(count++, dto.getDateOfSpray()			== null ? "" :dto.getDateOfSpray());
				stmt.bindString(count++, dto.getRemarks()				== null ? "" :dto.getRemarks());
				stmt.bindString(count++, dto.getIdLand()				== null ? "" :dto.getIdLand());
				stmt.bindString(count++, dto.getIdStages()				== null ? "" :dto.getIdStages());
				stmt.bindString(count++, dto.getPhoto()					== null ? "" :dto.getPhoto());
				stmt.bindString(count++, dto.getDateCreated()			== null ? "" :dto.getDateCreated());
				stmt.bindString(count++, dto.getDateModified()			== null ? "" :dto.getDateModified());
				stmt.bindLong(count++, dto.getActionFlag()				== null ? 0 :dto.getActionFlag());
				stmt.bindLong(count++, dto.getSyncFlag()				== null ? 1 :dto.getSyncFlag());
				stmt.bindString(count++, dto.getChemicalName()			== null ? "" :dto.getChemicalName());
				
				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("CropProtectionDAO  -- insertAll", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}

	
	public List<CropProtectionDTO> getTransactionalData(SQLiteDatabase dbObject) {
		List<CropProtectionDTO> instList = new ArrayList<CropProtectionDTO>();
		Cursor cursor = null;
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM CropProtection where syncFlag='0'", null);
			if (cursor.moveToFirst()) {
				do {
					CropProtectionDTO dto = new CropProtectionDTO();
					dto.setIdCropProtection(cursor.getString(count++));
					dto.setInsectOrDiseaseName(cursor.getString(count++));
					dto.setDateOfSpray(cursor.getString(count++));
					dto.setRemarks(cursor.getString(count++));
					dto.setIdLand(cursor.getString(count++));
					dto.setIdStages(cursor.getString(count++));
					dto.setPhoto(cursor.getString(count++));
					dto.setDateCreated(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));
					dto.setActionFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));
					dto.setChemicalName(cursor.getString(count++));

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("CropProtectionDAO  -- getTransactionalData", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}
	
	public boolean updateTransactionalData(SQLiteDatabase dbObject)
	{
		try {

			String query ="UPDATE  CropProtection  set syncFlag='1'";
			dbObject.execSQL(query);    
			return true;
			
		} catch (SQLException e) {
			Log.e("CropProtectionDAO  -- updateTransactionalData", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}
	
	public List<CropProtectionDTO> getCompleteData(SQLiteDatabase dbObject) {
		List<CropProtectionDTO> instList = new ArrayList<CropProtectionDTO>();
		Cursor cursor = null;
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM CropProtection ", null);
			if (cursor.moveToFirst()) {
				do {
					CropProtectionDTO dto = new CropProtectionDTO();
					dto.setIdCropProtection(cursor.getString(count++));
					dto.setInsectOrDiseaseName(cursor.getString(count++));
					dto.setDateOfSpray(cursor.getString(count++));
					dto.setRemarks(cursor.getString(count++));
					dto.setIdLand(cursor.getString(count++));
					dto.setIdStages(cursor.getString(count++));
					dto.setPhoto(cursor.getString(count++));
					dto.setDateCreated(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));
					dto.setActionFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));
					dto.setChemicalName(cursor.getString(count++));

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("CropProtectionDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}
	
	public boolean insertPartialData(SQLiteDatabase dbObject) {
		try {
			String query ="INSERT OR REPLACE INTO CropProtection(idCropProtection,insectOrDiseaseName,dateOfSpray,remarks,idLand,idStages,photo,dateCreated,dateModified,actionFlag,syncFlag,chemicalName) SELECT t.idCropProtection,t.insectOrDiseaseName,t.dateOfSpray,t.remarks,t.idLand,t.idStages,t.photo,t.dateCreated,t.dateModified,t.actionFlag,t.syncFlag,t.chemicalName  FROM CropProtection_Temp t left join CropProtection o on o.idCropprotection=t.idCropprotection";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("CropProtectionDAO  -- insertPartial", e.getMessage());
		} finally {
			//dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}
	public boolean deleteAll(SQLiteDatabase dbObject) {
		try {
			String query ="DELETE   FROM CropProtection_Temp";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("CropProtectionDAO  -- deleteall", e.getMessage());
		} finally {
			
			dbObject.close();
		}
		return false;
		
	}
	
}
