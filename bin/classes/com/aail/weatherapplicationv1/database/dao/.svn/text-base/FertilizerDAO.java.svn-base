/**
 * 
 */
package com.bayer.efm.hsp.database.dao;

import java.util.ArrayList;
import java.util.List;

import net.sqlcipher.database.SQLiteDatabase;
import net.sqlcipher.database.SQLiteStatement;
import android.content.ContentValues;
import net.sqlcipher.Cursor;
import net.sqlcipher.SQLException;
import android.util.Log;

import com.bayer.efm.hsp.database.dto.DTO;
import com.bayer.efm.hsp.database.dto.FertilizerDTO;
import com.bayer.efm.hsp.utils.CommonMethods;

public class FertilizerDAO implements DAO 
{

	private static FertilizerDAO fertilizerDAO;

	private FertilizerDAO() {

	}

	public static FertilizerDAO getInstance() {
		if (fertilizerDAO == null)
			fertilizerDAO = new FertilizerDAO();

		return fertilizerDAO;
	}

	@Override
	public boolean insert(SQLiteDatabase dbObject, List<DTO> list) {
		try {
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO Fertilizer(idFertilizer,idStage,idLand,ssp,fym,zinc,photo,dateCreated,dateModified,actionFlag,syncFlag)VALUES (?,?,?,?,?,?,?,?,?,?,?)");

			int count = 1;

			for (DTO items : list) {

				FertilizerDTO dto = (FertilizerDTO) items;
				stmt.bindString(count++, CommonMethods.getUUID());
				stmt.bindString(count++, dto.getIdStage());
				stmt.bindString(count++, dto.getIdLand());
				stmt.bindString(count++, dto.getSsp());
				stmt.bindString(count++, dto.getFym());
				stmt.bindString(count++, dto.getZinc());
				stmt.bindString(count++, dto.getPhoto());
				stmt.bindString(count++, dto.getDateCreated());
				stmt.bindString(count++, dto.getDateModified());
				stmt.bindLong(count++, dto.getActionFlag());
				stmt.bindLong(count++, dto.getSyncFlag());

				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("FertilizerDAO  -- insert", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean delete(SQLiteDatabase dbObject, DTO dto) {
		FertilizerDTO dtoObj = (FertilizerDTO) dto;
		try {
			dbObject.compileStatement(
					"DELETE FROM Fertilizer WHERE idFertilizer = '"
							+ dtoObj.getIdFertilizer() + "'").execute();

			return true;
		} catch (Exception e) {
			Log.e("FertilizerDAO  -- delete", e.getMessage());
		}

		finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean update(SQLiteDatabase dbObject, DTO dto) 
	{
		try 
		{
			FertilizerDTO dtoObj = (FertilizerDTO) dto;
			String whereCls = "idFertilizer = '" + dtoObj.getIdFertilizer()+ "'";
			
			ContentValues cValues = new ContentValues();
			
			cValues.put("idStage", dtoObj.getIdStage());
			cValues.put("idLand", dtoObj.getIdLand());
			cValues.put("ssp", dtoObj.getSsp());
			cValues.put("fym", dtoObj.getFym());
			cValues.put("zinc", dtoObj.getZinc());
			cValues.put("photo", dtoObj.getPhoto());
			cValues.put("dateCreated", dtoObj.getDateCreated());
			cValues.put("dateModified", dtoObj.getDateModified());
			cValues.put("actionFlag", dtoObj.getActionFlag());
			cValues.put("syncFlag", dtoObj.getSyncFlag());
			
			dbObject.update("Fertilizer", cValues, whereCls, null);

			return true;
		} catch (SQLException e) {
			Log.e("FertilizerDAO  -- update", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public List<DTO> getRecords(SQLiteDatabase dbObject) {
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM Fertilizer", null);
			if (cursor.moveToFirst()) {
				do {
					FertilizerDTO dto = new FertilizerDTO();
					dto.setIdFertilizer(cursor.getString(count++));
					dto.setIdStage(cursor.getString(count++));
					dto.setIdLand(cursor.getString(count++));
					dto.setSsp(cursor.getString(count++));
					dto.setFym(cursor.getString(count++));
					dto.setZinc(cursor.getString(count++));
					dto.setPhoto(cursor.getString(count++));
					dto.setDateCreated(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));
					dto.setActionFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("FertilizerDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}

	@Override
	public List<DTO> getRecordsWithValues(SQLiteDatabase dbObject,String columnName, String columnValue) 
	{
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM Fertilizer WHERE "+ columnName + " = '" + columnValue + "'", null);
			if (cursor.moveToFirst()) {
				do {
					FertilizerDTO dto = new FertilizerDTO();
					dto.setIdFertilizer(cursor.getString(count++));
					dto.setIdStage(cursor.getString(count++));
					dto.setIdLand(cursor.getString(count++));
					dto.setSsp(cursor.getString(count++));
					dto.setFym(cursor.getString(count++));
					dto.setZinc(cursor.getString(count++));
					dto.setPhoto(cursor.getString(count++));
					dto.setDateCreated(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));
					dto.setActionFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));

					instList.add(dto);
					
					count	= 0;
					
				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("FertilizerDAO  -- getRecordsWithValues", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();
			dbObject.close();
		}

		return instList;
	}
	
	public List<DTO> getRecordsByLandAndStage(SQLiteDatabase dbObject,String columnName1, String columnValue1) 
	{
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try {
			
			String qry = "SELECT * FROM Fertilizer WHERE "+ columnName1 + " = '" + columnValue1 + "'";
			cursor = dbObject.rawQuery(qry, null);
			if (cursor.moveToFirst()) {
				do {
					FertilizerDTO dto = new FertilizerDTO();
					
					dto.setIdFertilizer(cursor.getString(count++));
					dto.setIdStage(cursor.getString(count++));
					dto.setIdLand(cursor.getString(count++));
					dto.setSsp(cursor.getString(count++));
					dto.setFym(cursor.getString(count++));
					dto.setZinc(cursor.getString(count++));
					dto.setPhoto(cursor.getString(count++));
					dto.setDateCreated(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));
					dto.setActionFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));

					instList.add(dto);
					
					count	= 0;
					
				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("FertilizerDAO  -- getRecordsWithValues", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();
			dbObject.close();
		}

		return instList;
	}
	
	
	public boolean insertAll(SQLiteDatabase dbObject, List<FertilizerDTO> list,String tablename)  {
		try {
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO "+tablename+"(idFertilizer,idStage,idLand,ssp,fym,zinc,photo,dateCreated,dateModified,actionFlag,syncFlag)VALUES (?,?,?,?,?,?,?,?,?,?,?)");
			int count = 1;

			for (FertilizerDTO dto : list) {

				stmt.bindString(count++, dto.getIdFertilizer());
				stmt.bindString(count++, dto.getIdStage()		== null ? "" :dto.getIdStage());
				stmt.bindString(count++, dto.getIdLand()		== null ? "" :dto.getIdLand());
				stmt.bindString(count++, dto.getSsp()			== null ? "" :dto.getSsp());
				stmt.bindString(count++, dto.getFym()			== null ? "" :dto.getFym());
				stmt.bindString(count++, dto.getZinc()			== null ? "" :dto.getZinc());
				stmt.bindString(count++, dto.getPhoto()			== null ? "" :dto.getPhoto());
				stmt.bindString(count++, dto.getDateCreated()	== null ? "" :dto.getDateCreated());
				stmt.bindString(count++, dto.getDateModified()	== null ? "" :dto.getDateModified());
				stmt.bindLong(count++, dto.getActionFlag()		== null ? 1 :dto.getActionFlag());
				stmt.bindLong(count++, dto.getSyncFlag()		== null ? 1 :dto.getSyncFlag());

				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("FertilizerDAO  -- insertAll", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}
	
	public List<FertilizerDTO> getTransactionalData(SQLiteDatabase dbObject) {
		List<FertilizerDTO> instList = new ArrayList<FertilizerDTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM Fertilizer where syncFlag='0'", null);
			if (cursor.moveToFirst()) {
				do {
					String fym,ssp,zinc;
					FertilizerDTO dto = new FertilizerDTO();
					dto.setIdFertilizer(cursor.getString(count++));
					dto.setIdStage(cursor.getString(count++));
					dto.setIdLand(cursor.getString(count++));
					ssp=cursor.getString(count++);
					dto.setSsp(ssp.equals("") ? "0": ssp );
					fym=cursor.getString(count++);
					dto.setFym(fym.equals("") ? "0": fym );
					zinc=cursor.getString(count++);
					dto.setZinc(zinc.equals("") ? "0": zinc);
					dto.setPhoto(cursor.getString(count++));
					dto.setDateCreated(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));
					dto.setActionFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("FertilizerDAO  -- getTransactionalData", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}
	
	public boolean updateTransactionalData(SQLiteDatabase dbObject)
	{
		try {

			String query ="UPDATE  Fertilizer  set syncFlag='1'";
			dbObject.execSQL(query);    
			return true;
			
		} catch (SQLException e) {
			Log.e("FertilizerDAO  -- updateTransactionalData", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}
	
	public List<FertilizerDTO> getCompleteData(SQLiteDatabase dbObject) {
		List<FertilizerDTO> instList = new ArrayList<FertilizerDTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM Fertilizer", null);
			if (cursor.moveToFirst()) {
				do {
					FertilizerDTO dto = new FertilizerDTO();
					dto.setIdFertilizer(cursor.getString(count++));
					dto.setIdStage(cursor.getString(count++));
					dto.setIdLand(cursor.getString(count++));
					dto.setSsp(cursor.getString(count++));
					dto.setFym(cursor.getString(count++));
					dto.setZinc(cursor.getString(count++));
					dto.setPhoto(cursor.getString(count++));
					dto.setDateCreated(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));
					dto.setActionFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("FertilizerDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}
	
	public boolean insertPartialData(SQLiteDatabase dbObject) {
		try {
			String query ="INSERT OR REPLACE INTO Fertilizer(idFertilizer,idStage,idLand,ssp,fym,zinc,photo,dateCreated,dateModified,actionFlag,syncFlag) SELECT t.idFertilizer,t.idStage,t.idLand,t.ssp,t.fym,t.zinc,t.photo,t.dateCreated,t.dateModified,t.actionFlag,t.syncFlag  FROM Fertilizer_Temp t left join Fertilizer o on o.idFertilizer=t.idFertilizer";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("FertilizerDAO  -- insertPartial", e.getMessage());
		} finally {
			//dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}
	public boolean deleteAll(SQLiteDatabase dbObject) {
		try {
			String query ="DELETE   FROM Fertilizer_Temp";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("FertilizerDAO  -- deleteall", e.getMessage());
		} finally {
			
			dbObject.close();
		}
		return false;
		
	}

}
