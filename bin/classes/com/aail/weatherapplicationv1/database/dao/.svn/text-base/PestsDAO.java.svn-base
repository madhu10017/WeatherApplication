/**
 * 
 */
package com.bayer.efm.hsp.database.dao;

import java.util.ArrayList;
import java.util.List;

import net.sqlcipher.database.SQLiteDatabase;
import net.sqlcipher.database.SQLiteStatement;
import android.content.ContentValues;
import net.sqlcipher.Cursor;
import net.sqlcipher.SQLException;
import android.util.Log;

import com.bayer.efm.hsp.database.dto.DTO;
import com.bayer.efm.hsp.database.dto.PestsDTO;

public class PestsDAO implements DAO 
{

	private static PestsDAO pestsDAO;

	private PestsDAO() {}

	public static PestsDAO getInstance() 
	{
		if (pestsDAO == null)
			pestsDAO = new PestsDAO();

		return pestsDAO;
	}

	@Override
	public boolean insert(SQLiteDatabase dbObject, List<DTO> list) 
	{
		try {
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO Pests(idPest,name,code)VALUES (?,?,?)");

			int count = 1;

			for (DTO items : list) {

				PestsDTO dto = (PestsDTO) items;
				stmt.bindString(count++, dto.getIdPest());
				stmt.bindString(count++, dto.getName());
				stmt.bindString(count++, dto.getCode());

				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("PestsDAO  -- insert", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean delete(SQLiteDatabase dbObject, DTO dto) {
		PestsDTO dtoObj = (PestsDTO) dto;
		try {
			dbObject.compileStatement(
					"DELETE FROM Pests WHERE idPest  = '" + dtoObj.getIdPest()
							+ "'").execute();

			return true;
		} catch (Exception e) {
			Log.e("PestsDAO  -- delete", e.getMessage());
		}

		finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean update(SQLiteDatabase dbObject, DTO dto)
	{
		try {
			PestsDTO dtoObj = (PestsDTO) dto;
			String whereCls = "idPest  = '" + dtoObj.getIdPest() + "'";

			ContentValues cValues = new ContentValues();
			dbObject.update("Pests", cValues, whereCls, null);

			return true;
		} catch (SQLException e) {
			Log.e("PestsDAO  -- update", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public List<DTO> getRecords(SQLiteDatabase dbObject) 
	{
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count = 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM Pests", null);
			if (cursor.moveToFirst()) {
				do {
					PestsDTO dto = new PestsDTO();
					dto.setIdPest(cursor.getString(count++));
					dto.setName(cursor.getString(count++));
					dto.setCode(cursor.getString(count++));

					instList.add(dto);
					
					count = 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("PestsDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}

	@Override
	public List<DTO> getRecordsWithValues(SQLiteDatabase dbObject,String columnName, String columnValue) 
	{
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count = 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM Pests WHERE "+ columnName + " = '" + columnValue + "'", null);
			if (cursor.moveToFirst())
			{
				do {
					PestsDTO dto = new PestsDTO();
					dto.setIdPest(cursor.getString(count++));
					dto.setName(cursor.getString(count++));
					dto.setCode(cursor.getString(count++));

					instList.add(dto);
					
					count = 0;
					
				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("PestsDAO  -- getRecordsWithValues", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();
			dbObject.close();
		}

		return instList;
	}
	
	public boolean insertAll(SQLiteDatabase dbObject, List<PestsDTO> list,String tablename) 
	{
		try {
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO "+tablename+"(idPest,name,code)VALUES (?,?,?)");
			int count = 1;

			for (PestsDTO dto : list) {
				stmt.bindString(count++, dto.getIdPest());
				stmt.bindString(count++, dto.getName());
				stmt.bindString(count++, dto.getCode());

				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("PestsDAO  -- insert", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}
	
	public boolean updatePartialData(SQLiteDatabase dbObject) {
		try {
			//idPest,name,code
			String query ="UPDATE  Pests o set o.name=t.name,o.code=t.code from Pests_Temp t where o.idPest=t.idPest";
			Cursor cu = dbObject.rawQuery(query,null);
			cu.moveToFirst();
			cu.close();     
			return true;
			
		} catch (SQLException e) {
			Log.e("MandalDAO  -- update", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}
	
	public boolean insertPartialData(SQLiteDatabase dbObject) {
		try {
			String query ="INSERT OR REPLACE INTO Pests(idPest,name,code) SELECT t.idPest,t.name,t.code  FROM Pests_Temp t left join Pests o on o.idPest=t.idPest";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("PestsDAO  -- insert", e.getMessage());
		} finally {
			//dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}
	public boolean deleteAll(SQLiteDatabase dbObject) {
		try {
			String query ="DELETE   FROM Pests_Temp";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("PestsDAO  -- deleteall", e.getMessage());
		} finally {
			
			dbObject.close();
		}
		return false;
		
	}
	
	public List<PestsDTO> getCompleteData(SQLiteDatabase dbObject) {
		List<PestsDTO> instList = new ArrayList<PestsDTO>();
		Cursor cursor = null;
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM Pests ", null);
			if (cursor.moveToFirst()) {
				do {
					PestsDTO dto = new PestsDTO();
					dto.setIdPest(cursor.getString(count++));
					dto.setName(cursor.getString(count++));
					dto.setCode(cursor.getString(count++));
					

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("PestsDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}


}
