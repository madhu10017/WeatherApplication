/**
 * 
 */
package com.bayer.efm.hsp.database.dao;

import java.util.ArrayList;
import java.util.List;

import net.sqlcipher.database.SQLiteDatabase;
import net.sqlcipher.database.SQLiteStatement;
import android.content.ContentValues;
import net.sqlcipher.Cursor;
import net.sqlcipher.SQLException;
import android.util.Log;

import com.bayer.efm.hsp.database.dto.DTO;
import com.bayer.efm.hsp.database.dto.QRMappingDTO;
import com.bayer.efm.hsp.utils.CommonMethods;

public class QRMappingDAO implements DAO 
{

	private static QRMappingDAO qrmappingDAO;

	private QRMappingDAO() {

	}

	public static QRMappingDAO getInstance() 
	{
		if (qrmappingDAO == null)
			qrmappingDAO = new QRMappingDAO();

		return qrmappingDAO;
	}

	@Override
	public boolean insert(SQLiteDatabase dbObject, List<DTO> list) 
	{
		try
		{
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO QRMapping(idQRMapping,idStages,idLand,syncFlag)VALUES (?,?,?,?)");

			int count = 1;

			for (DTO items : list)
			{

				QRMappingDTO dto = (QRMappingDTO) items;
				stmt.bindString(count++, CommonMethods.getUUID());
				stmt.bindString(count++, dto.getIdStages());
				stmt.bindString(count++, dto.getIdLand());
				stmt.bindLong(count++, dto.getSyncFlag());

				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("QRMappingDAO  -- insert", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean delete(SQLiteDatabase dbObject, DTO dto) 
	{
		QRMappingDTO dtoObj = (QRMappingDTO) dto;
		try 
		{
			dbObject.compileStatement(
					"DELETE FROM QRMapping WHERE idQRMapping = '"
							+ dtoObj.getIdQRMapping() + "'").execute();

			return true;
		} catch (Exception e) {
			Log.e("QRMappingDAO  -- delete", e.getMessage());
		}

		finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean update(SQLiteDatabase dbObject, DTO dto) 
	{
		try 
		{
			QRMappingDTO dtoObj = (QRMappingDTO) dto;
			String whereCls = "idQRMapping = '" + dtoObj.getIdQRMapping() + "'";

			ContentValues cValues = new ContentValues();
			dbObject.update("QRMapping", cValues, whereCls, null);

			return true;
		} catch (SQLException e) {
			Log.e("QRMappingDAO  -- update", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public List<DTO> getRecords(SQLiteDatabase dbObject) 
	{
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try 
		{
			cursor = dbObject.rawQuery("SELECT * FROM QRMapping", null);
			if (cursor.moveToFirst()) 
			{
				do 
				{
					QRMappingDTO dto = new QRMappingDTO();
					dto.setIdQRMapping(cursor.getString(count++));
					dto.setIdStages(cursor.getString(count++));
					dto.setIdLand(cursor.getString(count++));
					dto.setIdLand(cursor.getString(count++));

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("QRMappingDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}

	@Override
	public List<DTO> getRecordsWithValues(SQLiteDatabase dbObject,
			String columnName, String columnValue) 
			{
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try 
		{
			cursor = dbObject.rawQuery("SELECT * FROM QRMapping WHERE "
					+ columnName + " = '" + columnValue + "'", null);
			if (cursor.moveToFirst())
			{
				do 
				{
					QRMappingDTO dto = new QRMappingDTO();
					dto.setIdQRMapping(cursor.getString(count++));
					dto.setIdStages(cursor.getString(count++));
					dto.setIdLand(cursor.getString(count++));

					instList.add(dto);
					
					count	= 0;
					
				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("QRMappingDAO  -- getRecordsWithValues", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();
			dbObject.close();
		}

		return instList;
	}
	
	public String getRecordsByLandAndStage(SQLiteDatabase dbObject,String columnName1, String columnValue1) 
	{
		String  instList = "";
		Cursor cursor = null;
		
		try {
			
			String qry = "SELECT * FROM QRMapping WHERE "+ columnName1 + " = '" + columnValue1 + "' ";
			cursor = dbObject.rawQuery(qry, null);
			if (cursor.moveToFirst()) {
				do {
					instList	= cursor.getString(0);
					
				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("WeedManagementDAO  -- getRecordsWithValues", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();
			dbObject.close();
		}

		return instList;
	}
	
	public boolean insertAll(SQLiteDatabase dbObject, List<QRMappingDTO> list,String tablename) 
	{
		try
		{
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO "+tablename+"(idQRMapping,idStages,idLand,syncFlag)VALUES (?,?,?,?)");

			int count = 1;

			for (QRMappingDTO dto : list)
			{
				stmt.bindString(count++, dto.getIdQRMapping());
				stmt.bindString(count++, dto.getIdStages()	== null ? "" :dto.getIdStages());
				stmt.bindString(count++, dto.getIdLand()	== null ? "" :dto.getIdLand());
				stmt.bindLong(count++, dto.getSyncFlag()	== null ? 1 : dto.getSyncFlag());

				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("QRMappingDAO  -- insertAll", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}
	
	public List<QRMappingDTO> getTransactionalData(SQLiteDatabase dbObject) 
	{
		List<QRMappingDTO> instList = new ArrayList<QRMappingDTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try 
		{
			cursor = dbObject.rawQuery("SELECT * FROM QRMapping where syncFlag='0'", null);
			if (cursor.moveToFirst()) 
			{
				do 
				{
					QRMappingDTO dto = new QRMappingDTO();
					dto.setIdQRMapping(cursor.getString(count++));
					dto.setIdStages(cursor.getString(count++));
					dto.setIdLand(cursor.getString(count++));
					dto.setSyncFlag(cursor.getInt(count++));

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("QRMappingDAO  -- getTransactionalData", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}
	
	public boolean updateTransactionalData(SQLiteDatabase dbObject)
	{
		try {

			String query ="UPDATE  QRMapping  set syncFlag='1'";
			dbObject.execSQL(query);    
			return true;
			
		} catch (SQLException e) {
			Log.e("QRMappingDAO  -- updateTransactionalData", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}
	
	public List<QRMappingDTO> getCompleteData(SQLiteDatabase dbObject) 
	{
		List<QRMappingDTO> instList = new ArrayList<QRMappingDTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try 
		{
			cursor = dbObject.rawQuery("SELECT * FROM QRMapping", null);
			if (cursor.moveToFirst()) 
			{
				do 
				{
					QRMappingDTO dto = new QRMappingDTO();
					dto.setIdQRMapping(cursor.getString(count++));
					dto.setIdStages(cursor.getString(count++));
					dto.setIdLand(cursor.getString(count++));
					dto.setSyncFlag(cursor.getInt(count++));

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("QRMappingDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}
	
	public boolean insertPartialData(SQLiteDatabase dbObject) {
		try {
			String query ="INSERT OR REPLACE INTO QRMapping(idQRMapping,idStages,idLand,syncFlag) SELECT t.idQRMapping,t.idStages,t.idLand,t.syncFlag  FROM QRMapping_Temp t left join QRMapping o on o.idQRMapping=t.idQRMapping";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("QRMappingDAO  -- insertPartial", e.getMessage());
		} finally {
			//dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}
	public boolean deleteAll(SQLiteDatabase dbObject) {
		try {
			String query ="DELETE   FROM QRMapping_Temp";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("QRMappingDAO  -- deleteall", e.getMessage());
		} finally {
			
			dbObject.close();
		}
		return false;
		
	}

}
