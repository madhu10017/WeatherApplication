/**
 * 
 */
package com.bayer.efm.hsp.database.dao;

import java.util.ArrayList;
import java.util.List;

import net.sqlcipher.database.SQLiteDatabase;
import net.sqlcipher.database.SQLiteStatement;
import android.content.ContentValues;
import net.sqlcipher.Cursor;
import net.sqlcipher.SQLException;
import android.util.Log;

import com.bayer.efm.hsp.database.dto.DTO;
import com.bayer.efm.hsp.database.dto.RemarksDTO;

public class RemarksDAO implements DAO 
{

	private static RemarksDAO remarksDAO;

	private RemarksDAO() {

	}

	public static RemarksDAO getInstance() 
	{
		if (remarksDAO == null)
			remarksDAO = new RemarksDAO();

		return remarksDAO;
	}

	@Override
	public boolean insert(SQLiteDatabase dbObject, List<DTO> list)
	{
		try 
		{
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO Remarks(idRemarks, remark,idStage ,type )VALUES (?,?,?,?)");

			int count = 1;

			for (DTO items : list) 
			{

				RemarksDTO dto = (RemarksDTO) items;
				stmt.bindString(count++, dto.getIdRemarks());
				stmt.bindString(count++, dto.getRemark());
				stmt.bindString(count++, dto.getIdStage());
				stmt.bindString(count++, dto.getType());

				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("RemarksDAO  -- insert", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean delete(SQLiteDatabase dbObject, DTO dto)
	{
		RemarksDTO dtoObj = (RemarksDTO) dto;
		try 
		{
			dbObject.compileStatement(
					"DELETE FROM Remarks WHERE idRemarks  = '"
							+ dtoObj.getIdRemarks() + "'").execute();

			return true;
		} catch (Exception e) {
			Log.e("RemarksDAO  -- delete", e.getMessage());
		}

		finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean update(SQLiteDatabase dbObject, DTO dto)
	{
		try 
		{
			RemarksDTO dtoObj = (RemarksDTO) dto;
			String whereCls = "idRemarks  = '" + dtoObj.getIdRemarks() + "'";

			ContentValues cValues = new ContentValues();
			dbObject.update("Remarks", cValues, whereCls, null);

			return true;
		} catch (SQLException e) {
			Log.e("RemarksDAO  -- update", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public List<DTO> getRecords(SQLiteDatabase dbObject) 
	{
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try 
		{
			cursor = dbObject.rawQuery("SELECT * FROM Remarks", null);
			if (cursor.moveToFirst()) 
			{
				do 
				{
					RemarksDTO dto = new RemarksDTO();
					dto.setIdRemarks(cursor.getString(count++));
					dto.setRemark(cursor.getString(count++));
					dto.setIdStage(cursor.getString(count++));
					dto.setType(cursor.getString(count++));

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("RemarksDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}

	@Override
	public List<DTO> getRecordsWithValues(SQLiteDatabase dbObject,
			String columnName, String columnValue) 
			{
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try 
		{
			cursor = dbObject.rawQuery("SELECT * FROM Remarks WHERE "
					+ columnName + " = '" + columnValue + "'", null);
			if (cursor.moveToFirst()) 
			{
				do 
				{
					RemarksDTO dto = new RemarksDTO();
					dto.setIdRemarks(cursor.getString(count++));
					dto.setRemark(cursor.getString(count++));
					dto.setIdStage(cursor.getString(count++));
					dto.setType(cursor.getString(count++));

					instList.add(dto);
					
					count	= 0;
					
				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("RemarksDAO  -- getRecordsWithValues", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();
			dbObject.close();
		}

		return instList;
	}
	
	public boolean insertAll(SQLiteDatabase dbObject, List<RemarksDTO> list,String tablename)
	{
		try 
		{
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO "+tablename+"(idRemarks,remark,idStage,type)VALUES (?,?,?,?)");
			int count = 1;

			for (RemarksDTO dto : list) 
			{
				stmt.bindString(count++, dto.getIdRemarks());
				stmt.bindString(count++, dto.getRemark());
				stmt.bindString(count++, dto.getIdStage());
				
				if(dto.getType() != null && !"".equals(dto.getType()))
					stmt.bindString(count++, dto.getType());
				else
					stmt.bindString(count++, "");

				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("RemarksDAO  -- insert", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}
	
	public boolean updatePartialData(SQLiteDatabase dbObject) {
		try {
			//idRemarks,remark,idStage,type
			String query ="UPDATE  Remarks o set o.remark=t.remark,o.idStage=t.idStage,o.type=t.type from Remarks_Temp t where o.idRemarks=t.idRemarks";
			Cursor cu = dbObject.rawQuery(query,null);
			cu.moveToFirst();
			cu.close();     
			return true;
			
		} catch (SQLException e) {
			Log.e("RemarksDAO  -- updatePartial", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}
	
	public boolean insertPartialData(SQLiteDatabase dbObject) {
		try {
			String query ="INSERT OR REPLACE INTO Remarks(idRemarks,remark,idStage,type) SELECT t.idRemarks,t.remark,t.idStage,t.type  FROM Remarks_Temp t left join Remarks o on o.idRemarks=t.idRemarks";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("RemarksDAO  -- insertPartial", e.getMessage());
		} finally {
			//dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}
	
	public boolean deleteAll(SQLiteDatabase dbObject) {
		try {
			String query ="DELETE  FROM Remarks_Temp";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("RemarksDAO  -- deleteall", e.getMessage());
		} finally {
			
			dbObject.close();
		}
		return false;
		
	}
	
	public List<RemarksDTO> getCompleteData(SQLiteDatabase dbObject) {
		List<RemarksDTO> instList = new ArrayList<RemarksDTO>();
		Cursor cursor = null;
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM Remarks ", null);
			if (cursor.moveToFirst()) {
				do {
					RemarksDTO dto = new RemarksDTO();
					dto.setIdRemarks(cursor.getString(count++));
					dto.setRemark(cursor.getString(count++));
					dto.setIdStage(cursor.getString(count++));
					dto.setType(cursor.getString(count++));
					
					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("RemarksDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}

}
