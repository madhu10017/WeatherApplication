/**
 * 
 */
package com.bayer.efm.hsp.database.dao;

import java.util.ArrayList;
import java.util.List;

import net.sqlcipher.database.SQLiteDatabase;
import net.sqlcipher.database.SQLiteStatement;
import android.content.ContentValues;
import net.sqlcipher.Cursor;
import net.sqlcipher.SQLException;
import android.util.Log;

import com.bayer.efm.hsp.database.dto.DTO;
import com.bayer.efm.hsp.database.dto.VillageDTO;

public class VillageDAO implements DAO {

	private static VillageDAO villageDAO;

	private VillageDAO() {

	}

	public static VillageDAO getInstance() {
		if (villageDAO == null)
			villageDAO = new VillageDAO();

		return villageDAO;
	}

	@Override
	public boolean insert(SQLiteDatabase dbObject, List<DTO> list) {
		try {
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO Village(idVillage,name,code,idMandal)VALUES (?,?,?,?)");

			int count = 1;

			for (DTO items : list) {

				VillageDTO dto = (VillageDTO) items;
				stmt.bindString(count++, dto.getIdVillage());
				stmt.bindString(count++, dto.getName());
				stmt.bindString(count++, dto.getCode());
				stmt.bindString(count++, dto.getIdMandal());

				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("VillageDAO  -- insert", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean delete(SQLiteDatabase dbObject, DTO dto) {
		VillageDTO dtoObj = (VillageDTO) dto;
		try {
			dbObject.compileStatement(
					"DELETE FROM Village WHERE idVillage = '"
							+ dtoObj.getIdVillage() + "'").execute();

			return true;
		} catch (Exception e) {
			Log.e("VillageDAO  -- delete", e.getMessage());
		}

		finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean update(SQLiteDatabase dbObject, DTO dto) {
		try {
			VillageDTO dtoObj = (VillageDTO) dto;
			String whereCls = "idVillage = '" + dtoObj.getIdVillage() + "'";

			ContentValues cValues = new ContentValues();
			dbObject.update("Village", cValues, whereCls, null);

			return true;
		} catch (SQLException e) {
			Log.e("VillageDAO  -- update", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public List<DTO> getRecords(SQLiteDatabase dbObject) {
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM Village", null);
			if (cursor.moveToFirst()) {
				do {
					VillageDTO dto = new VillageDTO();
					dto.setIdVillage(cursor.getString(count++));
					dto.setName(cursor.getString(count++));
					dto.setCode(cursor.getString(count++));
					dto.setIdMandal(cursor.getString(count++));
					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("VillageDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}

	@Override
	public List<DTO> getRecordsWithValues(SQLiteDatabase dbObject,
			String columnName, String columnValue) {
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM Village WHERE "
					+ columnName + " = '" + columnValue + "'", null);
			if (cursor.moveToFirst()) {
				do {
					VillageDTO dto = new VillageDTO();
					dto.setIdVillage(cursor.getString(count++));
					dto.setName(cursor.getString(count++));
					dto.setCode(cursor.getString(count++));
					dto.setIdMandal(cursor.getString(count++));
					
					instList.add(dto);
					
					count	= 0;
					
				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("VillageDAO  -- getRecordsWithValues", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();
			dbObject.close();
		}

		return instList;
	}
	public List<DTO> getVillages(SQLiteDatabase dbObject) {
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM Village order by name ASC", null);
			if (cursor.moveToFirst()) {
				do {
					VillageDTO dto = new VillageDTO();
					dto.setIdVillage(cursor.getString(count++));
					dto.setName(cursor.getString(count++));
					dto.setCode(cursor.getString(count++));
					dto.setIdMandal(cursor.getString(count++));
					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("VillageDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}
	public List<DTO> getVillagesByFarmerId(SQLiteDatabase dbObject, int farmerId) 
	{
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try {
			
			String qry	= "select * from village where idVillage = (select idVillage from grower where idGrower ='"+farmerId+"')";
			
			cursor = dbObject.rawQuery(qry, null);
			if (cursor.moveToFirst()) {
				do {
					VillageDTO dto = new VillageDTO();
					dto.setIdVillage(cursor.getString(count++));
					dto.setName(cursor.getString(count++));
					dto.setCode(cursor.getString(count++));
					dto.setIdMandal(cursor.getString(count++));
					
					instList.add(dto);
					
					count	= 0;
					
				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("VillageDAO  -- getVillagesByFarmerId", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();
			dbObject.close();
		}

		return instList;
	}
	
	public List<DTO> getVillagesByFarmerAndHybrid(SQLiteDatabase dbObject, int farmerId, int hybridId) 
	{
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try {
			
			String qry	= "select * from village where idVillage IN (select idVillage from Grower where idGrower IN (select idGrower from FSReceviedbyFarmer where idGrower='"+farmerId+"' and idFSReceviedbyFPS IN (select idFSReceivedbyFPS from FSReceivedbyFPS where idHybrid='"+hybridId+"')))";
			
			cursor = dbObject.rawQuery(qry, null);
			if (cursor.moveToFirst()) {
				do {
					VillageDTO dto = new VillageDTO();
					dto.setIdVillage(cursor.getString(count++));
					dto.setName(cursor.getString(count++));
					dto.setCode(cursor.getString(count++));
					dto.setIdMandal(cursor.getString(count++));
					
					instList.add(dto);
					
					count	= 0;
					
				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("VillageDAO  -- getVillagesByFarmerAndHybrid", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();
			dbObject.close();
		}

		return instList;
	}
	
	public List<DTO> getVillagesByHybridId(SQLiteDatabase dbObject, int hybridId) 
	{
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try {
			
			String qry	= "select * from village where idVillage IN (select idVillage from Grower where idGrower IN (select idGrower from FSReceviedbyFarmer where  idFSReceviedbyFPS IN (select idFSReceivedbyFPS from FSReceivedbyFPS where idHybrid='"+hybridId+"')))";
			
			cursor = dbObject.rawQuery(qry, null);
			if (cursor.moveToFirst()) {
				do {
					VillageDTO dto = new VillageDTO();
					dto.setIdVillage(cursor.getString(count++));
					dto.setName(cursor.getString(count++));
					dto.setCode(cursor.getString(count++));
					dto.setIdMandal(cursor.getString(count++));

					instList.add(dto);
					
					count	= 0;
					
				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("VillageDAO  -- getVillagesByHybridId", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();
			dbObject.close();
		}

		return instList;
	}

	public List<DTO> getVillagesByHybridIdAndLot(SQLiteDatabase dbObject, int hybridId, int lotNo) 
	{
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try {
			
			String qry	= "select * from village where idVillage IN(select idVillage from Grower where idGrower IN (select idGrower from Land where idLand = '"+lotNo+"' and idGrower IN(select idGrower from FSReceviedbyFarmer where  idFSReceviedbyFPS IN (select idFSReceivedbyFPS from FSReceivedbyFPS where idHybrid='"+hybridId+"'))))";
			
			cursor = dbObject.rawQuery(qry, null);
			if (cursor.moveToFirst()) {
				do {
					VillageDTO dto = new VillageDTO();
					dto.setIdVillage(cursor.getString(count++));
					dto.setName(cursor.getString(count++));
					dto.setCode(cursor.getString(count++));
					dto.setIdMandal(cursor.getString(count++));

					instList.add(dto);
					
					count	= 0;
					
				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("VillageDAO  -- getVillagesByHybridIdAndLot", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();
			dbObject.close();
		}

		return instList;
	}
	
	public List<DTO> getVillagesByLot(SQLiteDatabase dbObject, int lotNo) 
	{
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try {
			
			String qry	= "select * from village where idVillage IN(select idVillage from Grower where idGrower IN (select idGrower from Land where idLand = '"+lotNo+"'))";
			cursor = dbObject.rawQuery(qry, null);
			if (cursor.moveToFirst()) {
				do {
					VillageDTO dto = new VillageDTO();
					dto.setIdVillage(cursor.getString(count++));
					dto.setName(cursor.getString(count++));
					dto.setCode(cursor.getString(count++));
					dto.setIdMandal(cursor.getString(count++));

					instList.add(dto);
					
					count	= 0;
					
				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("VillageDAO  -- getVillagesByLot", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();
			dbObject.close();
		}

		return instList;
	}
	
	//****************************************************************************
	public List<DTO> getFilteredVillages(SQLiteDatabase dbObject, String farmerId, String hybridId, String lotNo) 
	{
		List<DTO> villagesList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try {
			
			String qry		= "select distinct v.idVillage, v.name, v.code, v.idMandal from Village V inner join Grower G on V.IDVillage = G.IDVillage left join Land L on L.IDGrower = G.IDGrower left join (select a.IDGrower,h.idHybrid,h.code [Hybrid] from FSReceviedbyFarmer a inner join FSReceivedbyFPS b on b.idFSReceivedbyFPS=a.idFSReceviedbyFPS inner join Hybrid h on h.idHybrid=b.idHybrid)a on a.IDGrower=G.IDGrower";
			String where = "";
			
			if(farmerId != null && !"".equals(farmerId))
				where += " where G.IDGrower in "+farmerId;
			
			if(!"0".equals(lotNo))
			{
				if("".equals(where))
					where += " where L.idLand='"+lotNo+"'";
				else
					where += " and L.idLand='"+lotNo+"'";
			}
			
			if(!"0".equals(hybridId))
			{
				if("".equals(where))
					where += " where a.idHybrid='"+hybridId+"'";
				else
					where += " and a.idHybrid='"+hybridId+"'";
			}
			
			cursor = dbObject.rawQuery(qry+where, null);
			if (cursor.moveToFirst()) {
				do {
					VillageDTO dto = new VillageDTO();
					dto.setIdVillage(cursor.getString(count++));
					dto.setName(cursor.getString(count++));
					dto.setCode(cursor.getString(count++));
					dto.setIdMandal(cursor.getString(count++));

					villagesList.add(dto);
					
					count	= 0;
					
				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("VillageDAO  -- getVillages", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();
			dbObject.close();
		}

		return villagesList;
	}
	
	public boolean insertAll(SQLiteDatabase dbObject, List<VillageDTO> list,String tablename) {
		try {
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO "+tablename+"(idVillage,name,code,idMandal)VALUES (?,?,?,?)");

			int count = 1;

			for (VillageDTO dto : list) {

				stmt.bindString(count++, dto.getIdVillage());
				stmt.bindString(count++, dto.getName());
				stmt.bindString(count++, dto.getCode());
				stmt.bindString(count++, dto.getIdMandal());

				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("VillageDAO  -- insert", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}
	
	public boolean updatePartialData(SQLiteDatabase dbObject) {
		try {
			//idVillage,name,code,idMandal
			String query ="UPDATE  Village o set o.name=t.name,o.code=t.code,o.idMandal=t.idMandal from Village_Temp t where o.idVillage=t.idVillage";
			Cursor cu = dbObject.rawQuery(query,null);
			cu.moveToFirst();
			cu.close();     
			return true;
			
		} catch (SQLException e) {
			Log.e("VillageDAO  -- updatePartial", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}
	
	public boolean insertPartialData(SQLiteDatabase dbObject) {
		try {
			String query ="INSERT OR REPLACE INTO Village(idVillage,name,code,idMandal) SELECT t.idVillage,t.name,t.code,t.idMandal  FROM Village_Temp t left join Village o on o.idVillage=t.idVillage";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("VillageDAO  -- insertPartial", e.getMessage());
		} finally {
		//	dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}
	
	public boolean deleteAll(SQLiteDatabase dbObject) {
		try {
			String query ="DELETE   FROM Village_Temp";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("VillageDAO  -- deleteall", e.getMessage());
		} finally {
			
			dbObject.close();
		}
		return false;
		
	}
	
	public List<VillageDTO> getCompleteData(SQLiteDatabase dbObject) {
		List<VillageDTO> instList = new ArrayList<VillageDTO>();
		Cursor cursor = null;
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM Village ", null);
			if (cursor.moveToFirst()) {
				do {
					VillageDTO dto = new VillageDTO();
					dto.setIdVillage(cursor.getString(count++));
					dto.setName(cursor.getString(count++));
					dto.setCode(cursor.getString(count++));
					dto.setIdMandal(cursor.getString(count++));
					

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("VillageDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}

}
