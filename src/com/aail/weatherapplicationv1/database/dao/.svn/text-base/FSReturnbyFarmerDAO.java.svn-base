/**
 * 
 */
package com.bayer.efm.hsp.database.dao;

import java.util.ArrayList;
import java.util.List;

import net.sqlcipher.database.SQLiteDatabase;
import net.sqlcipher.database.SQLiteStatement;
import android.content.ContentValues;
import net.sqlcipher.Cursor;
import net.sqlcipher.SQLException;
import android.util.Log;

import com.bayer.efm.hsp.database.dto.DTO;
import com.bayer.efm.hsp.database.dto.FSReturnDTO;
import com.bayer.efm.hsp.database.dto.FSReturnbyFarmerDTO;
import com.bayer.efm.hsp.utils.CommonMethods;

public class FSReturnbyFarmerDAO implements DAO {

	private static FSReturnbyFarmerDAO fsreturnbyfarmerDAO;

	private FSReturnbyFarmerDAO() {

	}

	public static FSReturnbyFarmerDAO getInstance() {
		if (fsreturnbyfarmerDAO == null)
			fsreturnbyfarmerDAO = new FSReturnbyFarmerDAO();

		return fsreturnbyfarmerDAO;
	}

	@Override
	public boolean insert(SQLiteDatabase dbObject, List<DTO> list) {
		try {
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO FSReturnbyFarmer(idFSReturnbyFarmer,qty,acerage,idReceviedbyFarmer,dateReturned,dateModified,syncFlag)VALUES (?,?,?,?,?,?,?)");

			int count = 1;

			for (DTO items : list) {

				FSReturnbyFarmerDTO dto = (FSReturnbyFarmerDTO) items;
				stmt.bindString(count++, CommonMethods.getUUID());
				stmt.bindString(count++, dto.getQty());
				stmt.bindString(count++, dto.getAcerage());
				stmt.bindString(count++, dto.getIdReceviedbyFarmer());
				stmt.bindString(count++, dto.getDateReturned());
				stmt.bindString(count++, dto.getDateModified());
				stmt.bindString(count++, "0");
				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("FSReturnbyFarmerDAO  -- insert", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean delete(SQLiteDatabase dbObject, DTO dto) {
		FSReturnbyFarmerDTO dtoObj = (FSReturnbyFarmerDTO) dto;
		try {
			dbObject.compileStatement(
					"DELETE FROM FSReturnbyFarmer WHERE idFSReturnbyFarmer = '"
							+ dtoObj.getIdFSReturnbyFarmer() + "'").execute();

			return true;
		} catch (Exception e) {
			Log.e("FSReturnbyFarmerDAO  -- delete", e.getMessage());
		}

		finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean update(SQLiteDatabase dbObject, DTO dto) {
		try {
			FSReturnbyFarmerDTO dtoObj = (FSReturnbyFarmerDTO) dto;
			String whereCls = "idFSReturnbyFarmer = '"
					+ dtoObj.getIdFSReturnbyFarmer() + "'";

			ContentValues cValues = new ContentValues();
			dbObject.update("FSReturnbyFarmer", cValues, whereCls, null);

			return true;
		} catch (SQLException e) {
			Log.e("FSReturnbyFarmerDAO  -- update", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public List<DTO> getRecords(SQLiteDatabase dbObject) {
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM FSReturnbyFarmer", null);
			if (cursor.moveToFirst()) {
				do {
					FSReturnbyFarmerDTO dto = new FSReturnbyFarmerDTO();
					dto.setIdFSReturnbyFarmer(cursor.getString(count++));
					dto.setQty(cursor.getString(count++));
					dto.setAcerage(cursor.getString(count++));
					dto.setIdReceviedbyFarmer(cursor.getString(count++));
					dto.setDateReturned(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));

					instList.add(dto);
					
					count	= 1;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("FSReturnbyFarmerDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}

	@Override
	public List<DTO> getRecordsWithValues(SQLiteDatabase dbObject,
			String columnName, String columnValue) {
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM FSReturnbyFarmer WHERE "
					+ columnName + " = '" + columnValue + "'", null);
			if (cursor.moveToFirst()) {
				do {
					FSReturnbyFarmerDTO dto = new FSReturnbyFarmerDTO();
					dto.setIdFSReturnbyFarmer(cursor.getString(count++));
					dto.setQty(cursor.getString(count++));
					dto.setAcerage(cursor.getString(count++));
					dto.setIdReceviedbyFarmer(cursor.getString(count++));
					dto.setDateReturned(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));

					instList.add(dto);
					
					count	= 1;
					
				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("FSReturnbyFarmerDAO  -- getRecordsWithValues",
					e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();
			dbObject.close();
		}

		return instList;
	}
	
	public DTO getFSReturnedRecords(SQLiteDatabase dbObject, String growerId, String hybridId) {
		FSReturnDTO dto	= new FSReturnDTO();
		Cursor cursor = null;
		int count	= 0;
		
		try {
			
			String qry	= "select sum(acerage) [acerage],case when seedType = 'male' then sum(qty) else 0 end [MaleReturned], case when seedType = 'female' then sum(qty) else 0 end [FemaleReturned]   from(select r.qty,r.acerage,h.seedType from FSReturnbyFarmer r inner join FSReceviedbyFarmer f on f.idReceviedbyFarmer=r.idReceviedbyFarmer inner join FSReceivedbyFPS rf on rf.idFSReceivedbyFPS=f.idFSReceviedbyFPS inner join Hybrid h on h.idHybrid=rf.idHybrid where f.idGrower='"+growerId+"' and rf.idHybrid='"+hybridId+"')";
			
			cursor = dbObject.rawQuery(qry, null);
			if (cursor.moveToFirst()) {
				do {
					
					dto.setTotalAcerage(cursor.getString(count++));
					dto.setTotalMaleReturnedQty(cursor.getString(count++));
					dto.setTotalFemaleReturnedQty(cursor.getString(count++));

					count	= 1;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("FSReturnbyFarmerDAO  -- getFSReturnedRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return dto;
	}
	
	public String getReturnQtyOfBatch(SQLiteDatabase dbObject, int idReceviedbyFarmer) {
		Cursor cursor 	= null;
		
		String qty		= "";
		
		try {
			
			String qry	= "select sum(qty) from FSReturnbyfarmer where idReceviedbyFarmer='"+idReceviedbyFarmer+"'";
			
			cursor = dbObject.rawQuery(qry, null);
			if (cursor.moveToFirst()) {
				do {
					
					qty	= cursor.getString(0);

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("FSReturnbyFarmerDAO  -- getReturnQtyOfBatch", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		if(qty != null && !"".equals(qty.trim())) return qty;
		
		else return "0";
	}
	
	public boolean insertAll(SQLiteDatabase dbObject, List<FSReturnbyFarmerDTO> list,String tablename) {
		try {
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO "+tablename+"(idFSReturnbyFarmer,qty,acerage,idReceviedbyFarmer,dateReturned,dateModified,syncFlag)VALUES (?,?,?,?,?,?,?)");
			int count = 1;

			for (FSReturnbyFarmerDTO dto : list) {

				stmt.bindString(count++, dto.getIdFSReturnbyFarmer());
				stmt.bindString(count++, dto.getQty());
				stmt.bindString(count++, dto.getAcerage());
				stmt.bindString(count++, dto.getIdReceviedbyFarmer());
				stmt.bindString(count++, dto.getDateReturned()  == null ? "" : dto.getDateReturned());
				stmt.bindString(count++, "1");
				stmt.bindString(count++, dto.getDateModified()	== null ? "" :dto.getDateModified());

				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("FSReturnbyFarmerDAO  -- insertAll", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}
	
	public List<FSReturnbyFarmerDTO> getTransactionalData(SQLiteDatabase dbObject) {
		List<FSReturnbyFarmerDTO> instList = new ArrayList<FSReturnbyFarmerDTO>();
		Cursor cursor = null;
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM FSReturnbyFarmer where syncFlag='0'", null);
			if (cursor.moveToFirst()) {
				do {
					FSReturnbyFarmerDTO dto = new FSReturnbyFarmerDTO();
					dto.setIdFSReturnbyFarmer(cursor.getString(count++));
					dto.setQty(cursor.getString(count++));
					dto.setAcerage(cursor.getString(count++));
					dto.setIdReceviedbyFarmer(cursor.getString(count++));
					dto.setDateReturned(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));
					dto.setSyncFlag(cursor.getString(count++));
					
					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("FSReturnbyFarmerDAO  -- getTransactionalData", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}
	
	public boolean updateTransactionalData(SQLiteDatabase dbObject)
	{
		try {

			String query ="UPDATE  FSReturnbyFarmer  set syncFlag='1'";
			dbObject.execSQL(query);    
			return true;
			
		} catch (SQLException e) {
			Log.e("FSReturnbyFarmerDAO  -- updateTransactionalData", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}
	
	public List<FSReturnbyFarmerDTO> getCompleteData(SQLiteDatabase dbObject) {
		List<FSReturnbyFarmerDTO> instList = new ArrayList<FSReturnbyFarmerDTO>();
		Cursor cursor = null;
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM FSReturnbyFarmer", null);
			if (cursor.moveToFirst()) {
				do {
					FSReturnbyFarmerDTO dto = new FSReturnbyFarmerDTO();
					dto.setIdFSReturnbyFarmer(cursor.getString(count++));
					dto.setQty(cursor.getString(count++));
					dto.setAcerage(cursor.getString(count++));
					dto.setIdReceviedbyFarmer(cursor.getString(count++));
					dto.setDateReturned(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));
					dto.setSyncFlag(cursor.getString(count++));
					
					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("FSReturnbyFarmerDAO  -- getCompleteData", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}
	
	public boolean insertPartialData(SQLiteDatabase dbObject) {
		try {
			String query ="INSERT OR REPLACE INTO FSReturnbyFarmer(idFSReturnbyFarmer,qty,acerage,idReceviedbyFarmer,dateReturned,dateModified,syncFlag) SELECT t.idFSReturnbyFarmer,t.qty,t.acerage,t.idReceviedbyFarmer,t.dateReturned,t.dateModified,t.syncFlag  FROM FSReturnbyFarmer_Temp t left join FSReturnbyFarmer o on o.idFSReturnbyFarmer=t.idFSReturnbyFarmer";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("FSReturnbyFarmerDAO  -- insertPartial", e.getMessage());
		} finally {
			//dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}
	public boolean deleteAll(SQLiteDatabase dbObject) {
		try {
			String query ="DELETE   FROM FSReturnbyFarmer_Temp";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("FSReturnbyFarmerDAO  -- deleteall", e.getMessage());
		} finally {
			
			dbObject.close();
		}
		return false;
		
	}

}
