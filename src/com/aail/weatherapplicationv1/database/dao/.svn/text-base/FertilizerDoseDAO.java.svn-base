/**
 * 
 */
package com.bayer.efm.hsp.database.dao;

import java.util.ArrayList;
import java.util.List;

import net.sqlcipher.database.SQLiteDatabase;
import net.sqlcipher.database.SQLiteStatement;
import android.content.ContentValues;
import net.sqlcipher.Cursor;
import net.sqlcipher.SQLException;
import android.util.Log;

import com.bayer.efm.hsp.database.dto.DTO;
import com.bayer.efm.hsp.database.dto.FertilizerDoseDTO;
import com.bayer.efm.hsp.utils.CommonMethods;

public class FertilizerDoseDAO implements DAO {

	private static FertilizerDoseDAO fertilizerdoseDAO;

	private FertilizerDoseDAO() {

	}

	public static FertilizerDoseDAO getInstance() {
		if (fertilizerdoseDAO == null)
			fertilizerdoseDAO = new FertilizerDoseDAO();

		return fertilizerdoseDAO;
	}

	@Override
	public boolean insert(SQLiteDatabase dbObject, List<DTO> list) {
		try {
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO FertilizerDose(idFertilizerDose,idFertilizer,dose,date,urea,mop,Complexname,quantity,idRemarks,remarksOthers,actionFlag,syncFlag)VALUES (?,?,?,?,?,?,?,?,?,?,?,?)");

			int count = 1;

			for (DTO items : list) 
			{
				FertilizerDoseDTO dto = (FertilizerDoseDTO) items;
				
				stmt.bindString(count++, CommonMethods.getUUID());
				stmt.bindString(count++, dto.getIdFertilizer());
				stmt.bindString(count++, dto.getDose());
				stmt.bindString(count++, dto.getDate());
				stmt.bindString(count++, dto.getUrea());
				stmt.bindString(count++, dto.getMop());
				stmt.bindString(count++, dto.getComplexname());
				stmt.bindString(count++, dto.getQuantity());
				stmt.bindString(count++, dto.getIdRemarks());
				stmt.bindString(count++, dto.getRemarksOthers());
				stmt.bindLong(count++, dto.getActionFlag());
				stmt.bindLong(count++, dto.getSyncFlag());
				
				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("FertilizerDoseDAO  -- insert", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean delete(SQLiteDatabase dbObject, DTO dto) {
		FertilizerDoseDTO dtoObj = (FertilizerDoseDTO) dto;
		try {
			dbObject.compileStatement(
					"DELETE FROM FertilizerDose WHERE idFertilizerDose = '"
							+ dtoObj.getIdFertilizerDose() + "'").execute();

			return true;
		} catch (Exception e) {
			Log.e("FertilizerDoseDAO  -- delete", e.getMessage());
		}

		finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean update(SQLiteDatabase dbObject, DTO dto) {
		try {
			FertilizerDoseDTO dtoObj = (FertilizerDoseDTO) dto;
			String whereCls = "idFertilizerDose = '"+ dtoObj.getIdFertilizerDose() + "'";
			
			ContentValues cValues = new ContentValues();
			
			cValues.put("idFertilizer", dtoObj.getIdFertilizer());
			cValues.put("dose", dtoObj.getDose());
			cValues.put("date", dtoObj.getDate());
			cValues.put("urea", dtoObj.getUrea());
			cValues.put("mop", dtoObj.getMop());
			cValues.put("Complexname", dtoObj.getComplexname());
			cValues.put("quantity", dtoObj.getQuantity());
			cValues.put("idRemarks", dtoObj.getIdRemarks());
			cValues.put("remarksOthers", dtoObj.getRemarksOthers());
			cValues.put("actionFlag", dtoObj.getActionFlag());
			cValues.put("syncFlag", dtoObj.getSyncFlag());
			
			dbObject.update("FertilizerDose", cValues, whereCls, null);

			return true;
		} catch (SQLException e) {
			Log.e("FertilizerDoseDAO  -- update", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public List<DTO> getRecords(SQLiteDatabase dbObject) {
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM FertilizerDose", null);
			if (cursor.moveToFirst()) {
				do {
					FertilizerDoseDTO dto = new FertilizerDoseDTO();
					dto.setIdFertilizerDose(cursor.getString(count++));
					dto.setIdFertilizer(cursor.getString(count++));
					dto.setDose(cursor.getString(count++));
					dto.setDate(cursor.getString(count++));
					dto.setUrea(cursor.getString(count++));
					dto.setMop(cursor.getString(count++));
					dto.setComplexname(cursor.getString(count++));
					dto.setQuantity(cursor.getString(count++));
					dto.setIdRemarks(cursor.getString(count++));
					dto.setRemarksOthers(cursor.getString(count++));
					dto.setActionFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("FertilizerDoseDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}

	@Override
	public List<DTO> getRecordsWithValues(SQLiteDatabase dbObject,
			String columnName, String columnValue) {
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		int count	= 0;
		try {
			cursor = dbObject.rawQuery("SELECT * FROM FertilizerDose WHERE "
					+ columnName + " = '" + columnValue + "'", null);
			if (cursor.moveToFirst()) {
				do {
					FertilizerDoseDTO dto = new FertilizerDoseDTO();
					dto.setIdFertilizerDose(cursor.getString(count++));
					dto.setIdFertilizer(cursor.getString(count++));
					dto.setDose(cursor.getString(count++));
					dto.setDate(cursor.getString(count++));
					dto.setUrea(cursor.getString(count++));
					dto.setMop(cursor.getString(count++));
					dto.setComplexname(cursor.getString(count++));
					dto.setQuantity(cursor.getString(count++));
					dto.setIdRemarks(cursor.getString(count++));
					dto.setRemarksOthers(cursor.getString(count++));
					dto.setActionFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));

					instList.add(dto);
					count	= 0;
					
				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("FertilizerDoseDAO  -- getRecordsWithValues", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();
			dbObject.close();
		}

		return instList;
	}
	
	public boolean insertAll(SQLiteDatabase dbObject, List<FertilizerDoseDTO> list,String tablename) {
		try {
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO "+tablename+"(idFertilizerDose,idFertilizer,dose,date,urea,mop,Complexname,quantity,idRemarks,remarksOthers,actionFlag,syncFlag)VALUES (?,?,?,?,?,?,?,?,?,?,?,?)");
			int count = 1;

			for (FertilizerDoseDTO dto : list) 
			{
				stmt.bindString(count++, dto.getIdFertilizerDose());
				stmt.bindString(count++, dto.getIdFertilizer());
				
				String doseStr	= dto.getDose();
				int dose	= 0;
				
				if(doseStr != null)
				{
					float doseF	= Float.valueOf(doseStr);
					dose	= (int)doseF;
				}
				
				stmt.bindString(count++, dto.getDose() ==null ?"":String.valueOf(dose));
				stmt.bindString(count++, dto.getDate() ==null ?"":dto.getDate());
				stmt.bindString(count++, dto.getUrea() ==null ?"":dto.getUrea());
				stmt.bindString(count++, dto.getMop() ==null ?"":dto.getMop());
				stmt.bindString(count++, dto.getComplexname() ==null ?"":dto.getComplexname());
				stmt.bindString(count++, dto.getQuantity() ==null ?"":dto.getQuantity());
				stmt.bindString(count++, dto.getIdRemarks() ==null ?"":dto.getIdRemarks());
				stmt.bindString(count++, dto.getRemarksOthers() ==null ?"":dto.getRemarksOthers());
				stmt.bindLong(count++, dto.getActionFlag() ==null ? 0:dto.getActionFlag());
				stmt.bindLong(count++, dto.getSyncFlag() ==null ? 1:dto.getSyncFlag());
				
				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("FertilizerDoseDAO  -- insert", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}
	
	public List<FertilizerDoseDTO> getTransactionalData(SQLiteDatabase dbObject) {
		List<FertilizerDoseDTO> instList = new ArrayList<FertilizerDoseDTO>();
		Cursor cursor = null;
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM FertilizerDose where syncFlag='0'", null);
			if (cursor.moveToFirst()) {
				do {
					FertilizerDoseDTO dto = new FertilizerDoseDTO();
					dto.setIdFertilizerDose(cursor.getString(count++));
					dto.setIdFertilizer(cursor.getString(count++));
					dto.setDose(cursor.getString(count++));
					dto.setDate(cursor.getString(count++));
					dto.setUrea(cursor.getString(count++));
					dto.setMop(cursor.getString(count++));
					dto.setComplexname(cursor.getString(count++));
					dto.setQuantity(cursor.getString(count++));
					dto.setIdRemarks(cursor.getString(count++));
					dto.setRemarksOthers(cursor.getString(count++));
					dto.setActionFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("FertilizerDoseDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}
	
	public boolean updateTransactionalData(SQLiteDatabase dbObject)
	{
		try {

			String query ="UPDATE  FertilizerDose  set syncFlag='1'";
			dbObject.execSQL(query);    
			return true;
			
		} catch (SQLException e) {
			Log.e("FertilizerDoseDAO  -- update", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}
	
	public List<FertilizerDoseDTO> getCompleteData(SQLiteDatabase dbObject) {
		List<FertilizerDoseDTO> instList = new ArrayList<FertilizerDoseDTO>();
		Cursor cursor = null;
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM FertilizerDose", null);
			if (cursor.moveToFirst()) {
				do {
					FertilizerDoseDTO dto = new FertilizerDoseDTO();
					dto.setIdFertilizerDose(cursor.getString(count++));
					dto.setIdFertilizer(cursor.getString(count++));
					dto.setDose(cursor.getString(count++));
					dto.setDate(cursor.getString(count++));
					dto.setUrea(cursor.getString(count++));
					dto.setMop(cursor.getString(count++));
					dto.setComplexname(cursor.getString(count++));
					dto.setQuantity(cursor.getString(count++));
					dto.setIdRemarks(cursor.getString(count++));
					dto.setRemarksOthers(cursor.getString(count++));
					dto.setActionFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("FertilizerDoseDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}

	public boolean insertPartialData(SQLiteDatabase dbObject) {
		try {
			String query ="INSERT OR REPLACE INTO FertilizerDose(idFertilizerDose,idFertilizer,dose,date,urea,mop,Complexname,quantity,idRemarks,remarksOthers,actionFlag,syncFlag) SELECT t.idFertilizerDose,t.idFertilizer,t.dose,t.date,t.urea,t.mop,t.Complexname,t.quantity,t.idRemarks,t.remarksOthers,t.actionFlag,t.syncFlag  FROM FertilizerDose_Temp t left join FertilizerDose o on o.idFertilizerDose=t.idFertilizerDose";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("FertilizerDoseDAO  -- insertPartial", e.getMessage());
		} finally {
			//dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}
	public boolean deleteAll(SQLiteDatabase dbObject) {
		try {
			String query ="DELETE   FROM FertilizerDose_Temp";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("FertilizerDoseDAO  -- deleteall", e.getMessage());
		} finally {
			
			dbObject.close();
		}
		return false;
		
	}

}
