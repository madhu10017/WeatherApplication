/**
 * 
 */
package com.bayer.efm.hsp.database.dao;

import java.util.ArrayList;
import java.util.List;

import net.sqlcipher.database.SQLiteDatabase;
import net.sqlcipher.database.SQLiteStatement;
import android.content.ContentValues;
import net.sqlcipher.Cursor;
import net.sqlcipher.SQLException;
import android.util.Log;

import com.bayer.efm.hsp.database.dto.DTO;
import com.bayer.efm.hsp.database.dto.IrrigationSourceDTO;

public class IrrigationSourceDAO implements DAO 
{

	private static IrrigationSourceDAO irrigationsourceDAO;

	private IrrigationSourceDAO() {

	}

	public static IrrigationSourceDAO getInstance() 
	{
		if (irrigationsourceDAO == null)
			irrigationsourceDAO = new IrrigationSourceDAO();

		return irrigationsourceDAO;
	}

	@Override
	public boolean insert(SQLiteDatabase dbObject, List<DTO> list)
	{
		try 
		{
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO IrrigationSource(idirrigationSource,sourceType)VALUES (?,?)");

			int count = 1;

			for (DTO items : list) {

				IrrigationSourceDTO dto = (IrrigationSourceDTO) items;
				stmt.bindString(count++, dto.getIdirrigationSource());
				stmt.bindString(count++, dto.getSourceType());

				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("IrrigationSourceDAO  -- insert", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean delete(SQLiteDatabase dbObject, DTO dto) 
	{
		IrrigationSourceDTO dtoObj = (IrrigationSourceDTO) dto;
		try {
			dbObject.compileStatement(
					"DELETE FROM IrrigationSource WHERE idirrigationSource = '"
							+ dtoObj.getIdirrigationSource() + "'").execute();

			return true;
		} catch (Exception e) {
			Log.e("IrrigationSourceDAO  -- delete", e.getMessage());
		}

		finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean update(SQLiteDatabase dbObject, DTO dto) 
	{
		try {
			IrrigationSourceDTO dtoObj = (IrrigationSourceDTO) dto;
			String whereCls = "idirrigationSource = '"
					+ dtoObj.getIdirrigationSource() + "'";

			ContentValues cValues = new ContentValues();
			dbObject.update("IrrigationSource", cValues, whereCls, null);

			return true;
		} catch (SQLException e) {
			Log.e("IrrigationSourceDAO  -- update", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public List<DTO> getRecords(SQLiteDatabase dbObject)
	{
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM IrrigationSource", null);
			if (cursor.moveToFirst()) {
				do {
					IrrigationSourceDTO dto = new IrrigationSourceDTO();
					dto.setIdirrigationSource(cursor.getString(count++));
					dto.setSourceType(cursor.getString(count++));

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("IrrigationSourceDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}

	@Override
	public List<DTO> getRecordsWithValues(SQLiteDatabase dbObject,
			String columnName, String columnValue) 
			{
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try 
		{
			cursor = dbObject.rawQuery("SELECT * FROM IrrigationSource WHERE "
					+ columnName + " = '" + columnValue + "'", null);
			if (cursor.moveToFirst()) {
				do {
					IrrigationSourceDTO dto = new IrrigationSourceDTO();
					dto.setIdirrigationSource(cursor.getString(count++));
					dto.setSourceType(cursor.getString(count++));

					instList.add(dto);
					
					count	= 0;
					
				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("IrrigationSourceDAO  -- getRecordsWithValues",
					e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();
			dbObject.close();
		}

		return instList;
	}
	
	public boolean insertAll(SQLiteDatabase dbObject, List<IrrigationSourceDTO> list,String tablename)
	{
		try 
		{
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO "+tablename+"(idirrigationSource,sourceType)VALUES (?,?)");
			int count = 1;

			for (IrrigationSourceDTO dto : list) {

				stmt.bindString(count++, dto.getIdirrigationSource());
				stmt.bindString(count++, dto.getSourceType());

				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("IrrigationSourceDAO  -- insert", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}
	
	public boolean updatePartialData(SQLiteDatabase dbObject) {
		try {
			//idirrigationSource,sourceType
			String query ="UPDATE  IrrigationSource o set o.sourceType=t.sourceType from IrrigationSource_Temp t where o.idirrigationSource=t.idirrigationSource";
			Cursor cu = dbObject.rawQuery(query,null);
			cu.moveToFirst();
			cu.close();     
			return true;
			
		} catch (SQLException e) {
			Log.e("IrrigationSourceDAO  -- updatePartial", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}
	
	public boolean insertPartialData(SQLiteDatabase dbObject) {
		try {
			String query ="INSERT OR REPLACE INTO IrrigationSource(idirrigationSource,sourceType) SELECT t.idirrigationSource,t.sourceType  FROM IrrigationSource_Temp t left join IrrigationSource o on o.idirrigationSource=t.idirrigationSource";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("IrrigationSourceDAO  -- insertPartial", e.getMessage());
		} finally {
			//dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}
	
	public boolean deleteAll(SQLiteDatabase dbObject) {
		try {
			String query ="DELETE   FROM IrrigationSource_Temp";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("IrrigationSourceDAO  -- deleteall", e.getMessage());
		} finally {
			
			dbObject.close();
		}
		return false;
		
	}
	
	public List<IrrigationSourceDTO> getCompleteData(SQLiteDatabase dbObject) {
		List<IrrigationSourceDTO> instList = new ArrayList<IrrigationSourceDTO>();
		Cursor cursor = null;
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM IrrigationSource ", null);
			if (cursor.moveToFirst()) {
				do {
					IrrigationSourceDTO dto = new IrrigationSourceDTO();
					dto.setIdirrigationSource(cursor.getString(count++));
					dto.setSourceType(cursor.getString(count++));
					

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("IrrigationSourceDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}


}
