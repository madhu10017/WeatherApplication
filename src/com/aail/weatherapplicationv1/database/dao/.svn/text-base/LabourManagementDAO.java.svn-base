/**
 * 
 */
package com.bayer.efm.hsp.database.dao;

import java.util.ArrayList;
import java.util.List;

import net.sqlcipher.database.SQLiteDatabase;
import net.sqlcipher.database.SQLiteStatement;
import android.content.ContentValues;
import net.sqlcipher.Cursor;
import net.sqlcipher.SQLException;
import android.util.Log;

import com.bayer.efm.hsp.database.dto.DTO;
import com.bayer.efm.hsp.database.dto.LabourManagementDTO;
import com.bayer.efm.hsp.utils.CommonMethods;

public class LabourManagementDAO implements DAO 
{

	private static LabourManagementDAO labourmanagementDAO;

	private LabourManagementDAO() {

	}

	public static LabourManagementDAO getInstance() 
	{
		if (labourmanagementDAO == null)
			labourmanagementDAO = new LabourManagementDAO();

		return labourmanagementDAO;
	}

	@Override
	public boolean insert(SQLiteDatabase dbObject, List<DTO> list)
	{
		try 
		{
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO LabourManagement(idLabourManagement,idLand,female,idStages,child,photo,male,remarks,dateCreated,dateModified,actionFlag,syncFlag,idOperationType,operationOthers)VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

			int count = 1;

			for (DTO items : list) 
			{

				LabourManagementDTO dto = (LabourManagementDTO) items;
				stmt.bindString(count++, CommonMethods.getUUID());
				stmt.bindString(count++, dto.getIdLand());
				stmt.bindString(count++, dto.getFemale());
				stmt.bindString(count++, dto.getIdStages());
				stmt.bindString(count++, dto.getChild());
				stmt.bindString(count++, dto.getPhoto());
				stmt.bindString(count++, dto.getMale());
				stmt.bindString(count++, dto.getRemarks());
				stmt.bindString(count++, dto.getDateCreated());
				stmt.bindString(count++, dto.getDateModified());
				stmt.bindLong(count++, dto.getActionFlag());
				stmt.bindLong(count++, dto.getSyncFlag());
				stmt.bindString(count++, dto.getIdOperations());
				stmt.bindString(count++, dto.getOtherOperations());

				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("LabourManagementDAO  -- insert", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean delete(SQLiteDatabase dbObject, DTO dto)
	{
		LabourManagementDTO dtoObj = (LabourManagementDTO) dto;
		try
		{
			dbObject.compileStatement(
					"DELETE FROM LabourManagement WHERE idLabourManagement = '"
							+ dtoObj.getIdLabourManagement() + "'").execute();

			return true;
		} catch (Exception e) {
			Log.e("LabourManagementDAO  -- delete", e.getMessage());
		}

		finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean update(SQLiteDatabase dbObject, DTO dto) 
	{
		try 
		{
			LabourManagementDTO dtoObj = (LabourManagementDTO) dto;
			String whereCls = "idLabourManagement = '"+ dtoObj.getIdLabourManagement() + "'";

			ContentValues cValues = new ContentValues();
			
			cValues.put("idLand",dtoObj.getIdLand());
			cValues.put("female", dtoObj.getFemale());
			cValues.put("idStages", dtoObj.getIdStages());
			cValues.put("child", dtoObj.getChild());
			cValues.put("photo", dtoObj.getPhoto());
			cValues.put("male", dtoObj.getMale());
			cValues.put("remarks", dtoObj.getRemarks());
			//cValues.put("dateCreated", dtoObj.getDateCreated());
			cValues.put("dateModified", dtoObj.getDateModified());
			cValues.put("actionFlag", dtoObj.getActionFlag());
			cValues.put("syncFlag", dtoObj.getSyncFlag());
			cValues.put("idOperationType", dtoObj.getIdOperations());
			cValues.put("operationOthers", dtoObj.getOtherOperations());
			
			dbObject.update("LabourManagement", cValues, whereCls, null);

			return true;
		} catch (SQLException e) {
			Log.e("LabourManagementDAO  -- update", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public List<DTO> getRecords(SQLiteDatabase dbObject)
	{
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try 
		{
			cursor = dbObject.rawQuery("SELECT * FROM LabourManagement", null);
			if (cursor.moveToFirst()) 
			{
				do 
				{
					LabourManagementDTO dto = new LabourManagementDTO();
					dto.setIdLabourManagement(cursor.getString(count++));
					dto.setIdLand(cursor.getString(count++));
					dto.setFemale(cursor.getString(count++));
					dto.setIdStages(cursor.getString(count++));
					dto.setChild(cursor.getString(count++));
					dto.setPhoto(cursor.getString(count++));
					dto.setMale(cursor.getString(count++));
					dto.setRemarks(cursor.getString(count++));
					dto.setDateCreated(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));
					dto.setActionFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));
					dto.setIdOperations(cursor.getString(count++));
					dto.setOtherOperations(cursor.getString(count++));

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("LabourManagementDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}

	@Override
	public List<DTO> getRecordsWithValues(SQLiteDatabase dbObject,
			String columnName, String columnValue) 
			{
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try 
		{
			cursor = dbObject.rawQuery("SELECT * FROM LabourManagement WHERE "
					+ columnName + " = '" + columnValue + "'", null);
			if (cursor.moveToFirst()) 
			{
				do 
				{
					LabourManagementDTO dto = new LabourManagementDTO();
					dto.setIdLabourManagement(cursor.getString(count++));
					dto.setIdLand(cursor.getString(count++));
					dto.setFemale(cursor.getString(count++));
					dto.setIdStages(cursor.getString(count++));
					dto.setChild(cursor.getString(count++));
					dto.setPhoto(cursor.getString(count++));
					dto.setMale(cursor.getString(count++));
					dto.setRemarks(cursor.getString(count++));
					dto.setDateCreated(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));
					dto.setActionFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));
					dto.setIdOperations(cursor.getString(count++));
					dto.setOtherOperations(cursor.getString(count++));

					instList.add(dto);
				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("LabourManagementDAO  -- getRecordsWithValues",
					e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();
			dbObject.close();
		}

		return instList;
	}
	
	public List<DTO> getRecordsByLandAndStage(SQLiteDatabase dbObject,String columnName1, String columnValue1) 
	{
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try {
			
			String qry = "SELECT * FROM LabourManagement WHERE "+ columnName1 + " = '" + columnValue1 + "'";
			cursor = dbObject.rawQuery(qry, null);
			if (cursor.moveToFirst()) {
				do {
					LabourManagementDTO dto = new LabourManagementDTO();
					
					dto.setIdLabourManagement(cursor.getString(count++));
					dto.setIdLand(cursor.getString(count++));
					dto.setFemale(cursor.getString(count++));
					dto.setIdStages(cursor.getString(count++));
					dto.setChild(cursor.getString(count++));
					dto.setPhoto(cursor.getString(count++));
					dto.setMale(cursor.getString(count++));
					dto.setRemarks(cursor.getString(count++));
					dto.setDateCreated(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));
					dto.setActionFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));
					dto.setIdOperations(cursor.getString(count++));
					dto.setOtherOperations(cursor.getString(count++));

					instList.add(dto);
					
					count	= 0;
					
				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("LabourManagementDAO  -- getRecordsWithValues", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();
			dbObject.close();
		}

		return instList;
	}
	
	public boolean insertAll(SQLiteDatabase dbObject, List<LabourManagementDTO> list,String tablename)
	{
		try 
		{
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO "+tablename+"(idLabourManagement,idLand,female,idStages,child,photo,male,remarks,dateCreated,dateModified,actionFlag,syncFlag,idOperationType,operationOthers)VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

			int count = 1;

			for (LabourManagementDTO dto : list) 
			{
				stmt.bindString(count++, dto.getIdLabourManagement());
				stmt.bindString(count++, dto.getIdLand());
				stmt.bindString(count++, dto.getFemale()			== null ? "" : dto.getFemale());
				stmt.bindString(count++, dto.getIdStages()			== null ? "" : dto.getIdStages());
				stmt.bindString(count++, dto.getChild()				== null ? "" : dto.getChild());
				stmt.bindString(count++, dto.getPhoto()				== null ? "" : dto.getPhoto());
				stmt.bindString(count++, dto.getMale()				== null ? "" : dto.getMale());
				stmt.bindString(count++, dto.getRemarks()			== null ? "" : dto.getRemarks());
				stmt.bindString(count++, dto.getDateCreated()		== null ? "" : dto.getDateCreated());
				stmt.bindString(count++, dto.getDateModified()		== null ? "" : dto.getDateModified());
				stmt.bindLong(count++, dto.getActionFlag()			== null ? 1 : dto.getActionFlag());
				stmt.bindLong(count++, dto.getSyncFlag()			== null ? 1 : dto.getSyncFlag());
				stmt.bindString(count++, dto.getIdOperations()		== null ? "" : dto.getIdOperations());
				stmt.bindString(count++, dto.getOtherOperations()	== null ? "" : dto.getOtherOperations());

				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("LabourManagementDAO  -- insertAll", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}
	
	public List<LabourManagementDTO> getTransactionalData(SQLiteDatabase dbObject)
	{
		List<LabourManagementDTO> instList = new ArrayList<LabourManagementDTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try 
		{
			cursor = dbObject.rawQuery("SELECT * FROM LabourManagement where syncFlag='0'", null);
			if (cursor.moveToFirst()) 
			{
				do 
				{
					LabourManagementDTO dto = new LabourManagementDTO();
					dto.setIdLabourManagement(cursor.getString(count++));
					dto.setIdLand(cursor.getString(count++));
					dto.setFemale(cursor.getString(count++));
					dto.setIdStages(cursor.getString(count++));
					dto.setChild(cursor.getString(count++));
					dto.setPhoto(cursor.getString(count++));
					dto.setMale(cursor.getString(count++));
					dto.setRemarks(cursor.getString(count++));
					dto.setDateCreated(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));
					dto.setActionFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));
					dto.setIdOperations(cursor.getString(count++));
					dto.setOtherOperations(cursor.getString(count++));

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("LabourManagementDAO  -- getTransactionalData", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}
	
	public boolean updateTransactionalData(SQLiteDatabase dbObject)
	{
		try {

			String query ="UPDATE  LabourManagement  set syncFlag='1'";
			dbObject.execSQL(query);    
			return true;
			
		} catch (SQLException e) {
			Log.e("LabourManagementDAO  -- updateTransactionalData", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}
	
	public List<LabourManagementDTO> getCompleteData(SQLiteDatabase dbObject)
	{
		List<LabourManagementDTO> instList = new ArrayList<LabourManagementDTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try 
		{
			cursor = dbObject.rawQuery("SELECT * FROM LabourManagement", null);
			if (cursor.moveToFirst()) 
			{
				do 
				{
					LabourManagementDTO dto = new LabourManagementDTO();
					dto.setIdLabourManagement(cursor.getString(count++));
					dto.setIdLand(cursor.getString(count++));
					dto.setFemale(cursor.getString(count++));
					dto.setIdStages(cursor.getString(count++));
					dto.setChild(cursor.getString(count++));
					dto.setPhoto(cursor.getString(count++));
					dto.setMale(cursor.getString(count++));
					dto.setRemarks(cursor.getString(count++));
					dto.setDateCreated(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));
					dto.setActionFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));
					dto.setIdOperations(cursor.getString(count++));
					dto.setOtherOperations(cursor.getString(count++));

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("LabourManagementDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}
	
	public boolean insertPartialData(SQLiteDatabase dbObject) {
		try {
			String query ="INSERT OR REPLACE INTO LabourManagement(idLabourManagement,idLand,female,idStages,child,photo,male,remarks,dateCreated,dateModified,actionFlag,syncFlag,idOperationType,operationOthers) SELECT t.idLabourManagement,t.idLand,t.female,t.idStages,t.child,t.photo,t.male,t.remarks,t.dateCreated,t.dateModified,t.actionFlag,t.syncFlag,t.idOperationType,t.operationOthers  FROM LabourManagement_Temp t left join LabourManagement o on o.idLabourManagement=t.idLabourManagement";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("LabourManagementDAO  -- insertPartial", e.getMessage());
		} finally {
			//dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}
	public boolean deleteAll(SQLiteDatabase dbObject) {
		try {
			String query ="DELETE   FROM LabourManagement_Temp";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("LabourManagementDAO  -- deleteall", e.getMessage());
		} finally {
			
			dbObject.close();
		}
		return false;
		
	}

}
