/**
 * 
 */
package com.bayer.efm.hsp.database.dao;

import java.util.ArrayList;
import java.util.List;

import net.sqlcipher.database.SQLiteDatabase;
import net.sqlcipher.database.SQLiteStatement;
import android.content.ContentValues;
import net.sqlcipher.Cursor;
import net.sqlcipher.SQLException;
import android.util.Log;

import com.bayer.efm.hsp.database.dto.DTO;
import com.bayer.efm.hsp.database.dto.QualityReviewDTO;
import com.bayer.efm.hsp.utils.CommonMethods;

public class QualityReviewDAO implements DAO 
{

	private static QualityReviewDAO qualityreviewDAO;

	private QualityReviewDAO() {

	}

	public static QualityReviewDAO getInstance() 
	{
		if (qualityreviewDAO == null)
			qualityreviewDAO = new QualityReviewDAO();

		return qualityreviewDAO;
	}

	@Override
	public boolean insert(SQLiteDatabase dbObject, List<DTO> list) 
	{
		try
		{
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO QualityReview(idQualityReview,idQRMapping,comments,date,reviiewedBy,dateCreated,dateModified,actionFlag,syncFlag)VALUES (?,?,?,?,?,?,?,?,?)");

			int count = 1;
			

			for (DTO items : list) 
			{
				QualityReviewDTO dto = (QualityReviewDTO) items;
				stmt.bindString(count++, CommonMethods.getUUID());
				stmt.bindString(count++, dto.getIdQRMapping());
				stmt.bindString(count++, dto.getComments());
				stmt.bindString(count++, dto.getDate());
				stmt.bindString(count++, dto.getReviiewedBy());
				stmt.bindString(count++, dto.getDateCreated());
				stmt.bindString(count++, dto.getDateModified());
				stmt.bindLong(count++, dto.getActionFlag());
				stmt.bindLong(count++, dto.getSyncFlag());

				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("QualityReviewDAO  -- insert", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean delete(SQLiteDatabase dbObject, DTO dto)
	{
		QualityReviewDTO dtoObj = (QualityReviewDTO) dto;
		try 
		{
			dbObject.compileStatement(
					"DELETE FROM QualityReview WHERE idQualityReview = '"
							+ dtoObj.getIdQualityReview() + "'").execute();

			return true;
		} catch (Exception e) {
			Log.e("QualityReviewDAO  -- delete", e.getMessage());
		}

		finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean update(SQLiteDatabase dbObject, DTO dto)
	{
		try
		{
			QualityReviewDTO dtoObj = (QualityReviewDTO) dto;
			String whereCls = "idQualityReview = '"+ dtoObj.getIdQualityReview() + "'";

			ContentValues cValues = new ContentValues();

			cValues.put("idQRMapping", dtoObj.getIdQRMapping());
			cValues.put("comments", dtoObj.getComments());
			cValues.put("date", dtoObj.getDate());
			cValues.put("reviiewedBy", dtoObj.getReviiewedBy());
			//cValues.put("dateCreated", dtoObj.getDateCreated());
			cValues.put("dateModified", dtoObj.getDateModified());
			cValues.put("actionFlag", dtoObj.getActionFlag());
			cValues.put("syncFlag", dtoObj.getSyncFlag());
			
			dbObject.update("QualityReview", cValues, whereCls, null);

			return true;
		} catch (SQLException e) {
			Log.e("QualityReviewDAO  -- update", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public List<DTO> getRecords(SQLiteDatabase dbObject) 
	{
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try 
		{
			cursor = dbObject.rawQuery("SELECT * FROM QualityReview", null);
			if (cursor.moveToFirst())
			{
				do 
				{
					QualityReviewDTO dto = new QualityReviewDTO();
					dto.setIdQualityReview(cursor.getString(count++));
					dto.setIdQRMapping(cursor.getString(count++));
					dto.setComments(cursor.getString(count++));
					dto.setDate(cursor.getString(count++));
					dto.setReviiewedBy(cursor.getString(count++));
					dto.setDateCreated(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));
					dto.setActionFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("QualityReviewDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}

	@Override
	public List<DTO> getRecordsWithValues(SQLiteDatabase dbObject,
			String columnName, String columnValue)
			{
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try 
		{
			cursor = dbObject.rawQuery("SELECT * FROM QualityReview WHERE "+ columnName + " = '" + columnValue + "'", null);
			if (cursor.moveToFirst())
			{
				do 
				{
					QualityReviewDTO dto = new QualityReviewDTO();
					dto.setIdQualityReview(cursor.getString(count++));
					dto.setIdQRMapping(cursor.getString(count++));
					dto.setComments(cursor.getString(count++));
					dto.setDate(cursor.getString(count++));
					dto.setReviiewedBy(cursor.getString(count++));
					dto.setDateCreated(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));
					dto.setActionFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));

					instList.add(dto);
					
					count	= 0;
					
				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("QualityReviewDAO  -- getRecordsWithValues", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();
			dbObject.close();
		}

		return instList;
	}
	
	
	public boolean insertAll(SQLiteDatabase dbObject, List<QualityReviewDTO> list,String tablename) 
	{
		try
		{
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO "+tablename+"(idQualityReview,idQRMapping,comments,date,reviiewedBy,dateCreated,dateModified,actionFlag,syncFlag)VALUES (?,?,?,?,?,?,?,?,?)");
			int count = 1;

			for (QualityReviewDTO dto : list) 
			{
				stmt.bindString(count++, dto.getIdQualityReview());
				stmt.bindString(count++, dto.getIdQRMapping()			== null ? "" : dto.getIdQRMapping());
				stmt.bindString(count++, dto.getComments()				== null ? "" : dto.getComments());
				stmt.bindString(count++, dto.getDate()					== null ? "" : dto.getDate());
				stmt.bindString(count++, dto.getReviiewedBy()			== null ? "" : dto.getReviiewedBy());
				stmt.bindString(count++, dto.getDateCreated()			== null ? "" : dto.getDateCreated());
				stmt.bindString(count++, dto.getDateModified()			== null ? "" : dto.getDateModified());
				stmt.bindLong(count++, dto.getActionFlag()				== null ? 1 : dto.getActionFlag());
				stmt.bindLong(count++, dto.getSyncFlag()				== null ? 1 : dto.getSyncFlag());

				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("QualityReviewDAO  -- insertAll", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}

	
	public List<QualityReviewDTO> getTransactionalData(SQLiteDatabase dbObject) 
	{
		List<QualityReviewDTO> instList = new ArrayList<QualityReviewDTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try 
		{
			cursor = dbObject.rawQuery("SELECT * FROM QualityReview where syncFlag='0'", null);
			if (cursor.moveToFirst())
			{
				do 
				{
					QualityReviewDTO dto = new QualityReviewDTO();
					dto.setIdQualityReview(cursor.getString(count++));
					dto.setIdQRMapping(cursor.getString(count++));
					dto.setComments(cursor.getString(count++));
					dto.setDate(cursor.getString(count++));
					dto.setReviiewedBy(cursor.getString(count++));
					dto.setDateCreated(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));
					dto.setActionFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("QualityReviewDAO  -- getTransactionalData", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}
	
	public boolean updateTransactionalData(SQLiteDatabase dbObject)
	{
		try {

			String query ="UPDATE  QualityReview  set syncFlag='1'";
			dbObject.execSQL(query);    
			return true;
			
		} catch (SQLException e) {
			Log.e("QualityReviewDAO  -- updateTransactionalData", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}
	
	public List<QualityReviewDTO> getCompleteData(SQLiteDatabase dbObject) 
	{
		List<QualityReviewDTO> instList = new ArrayList<QualityReviewDTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try 
		{
			cursor = dbObject.rawQuery("SELECT * FROM QualityReview", null);
			if (cursor.moveToFirst())
			{
				do 
				{
					QualityReviewDTO dto = new QualityReviewDTO();
					dto.setIdQualityReview(cursor.getString(count++));
					dto.setIdQRMapping(cursor.getString(count++));
					dto.setComments(cursor.getString(count++));
					dto.setDate(cursor.getString(count++));
					dto.setReviiewedBy(cursor.getString(count++));
					dto.setDateCreated(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));
					dto.setActionFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("QualityReviewDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}
	
	public boolean insertPartialData(SQLiteDatabase dbObject) {
		try {
			String query ="INSERT OR REPLACE INTO QualityReview(idQualityReview,idQRMapping,comments,date,reviiewedBy,dateCreated,dateModified,actionFlag,syncFlag) SELECT t.idQualityReview,t.idQRMapping,t.comments,t.date,t.reviiewedBy,t.dateCreated,t.dateModified,t.actionFlag,t.syncFlag  FROM QualityReview_Temp t left join QualityReview o on o.idQualityReview=t.idQualityReview";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("QualityReviewDAO  -- insertPartial", e.getMessage());
		} finally {
			//dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}
	public boolean deleteAll(SQLiteDatabase dbObject) {
		try {
			String query ="DELETE   FROM QualityReview_Temp";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("QualityReviewDAO  -- deleteall", e.getMessage());
		} finally {
			
			dbObject.close();
		}
		return false;
		
	}
	
}
