/**
 * 
 */
package com.bayer.efm.hsp.database.dao;

import java.util.ArrayList;
import java.util.List;

import net.sqlcipher.database.SQLiteDatabase;
import net.sqlcipher.database.SQLiteStatement;
import android.content.ContentValues;
import net.sqlcipher.Cursor;
import net.sqlcipher.SQLException;
import android.util.Log;

import com.bayer.efm.hsp.database.dto.DTO;
import com.bayer.efm.hsp.database.dto.TransplantationDTO;
import com.bayer.efm.hsp.utils.CommonMethods;

public class TransplantationDAO implements DAO {

	private static TransplantationDAO transplantationDAO;

	private TransplantationDAO() {

	}

	public static TransplantationDAO getInstance() {
		if (transplantationDAO == null)
			transplantationDAO = new TransplantationDAO();

		return transplantationDAO;
	}

	@Override
	public boolean insert(SQLiteDatabase dbObject, List<DTO> list) {
		try {
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO Transplantation(idTransplantation,idLand,dotMale,dotFemale,idRemarks,otherRemarks,idAgronomicalCondition,transplantationAcres,photo,yeildEstimation,dateCreated,dateModified,dateCompletion,maleFlag,femaleFlag,syncFlag)VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

			int count = 1;

			for (DTO items : list) {
				
				TransplantationDTO dto = (TransplantationDTO) items;
				stmt.bindString(count++, CommonMethods.getUUID());
				stmt.bindString(count++, dto.getIdLand());
				stmt.bindString(count++, dto.getDotMale());
				stmt.bindString(count++, dto.getDotFemale());
				stmt.bindString(count++, dto.getIdRemarks());
				stmt.bindString(count++, dto.getOtherRemarks());
				stmt.bindString(count++, dto.getIdAgronomicalCondition());
				stmt.bindString(count++, dto.getTransplantationAcres());
				stmt.bindString(count++, dto.getPhoto());
				stmt.bindString(count++, dto.getYeildEstimation());
				stmt.bindString(count++, dto.getDateCreated());
				stmt.bindString(count++, dto.getDateModified());
				stmt.bindString(count++, dto.getDateCompletion());
				stmt.bindLong(count++, dto.getMaleFlag());
				stmt.bindLong(count++, dto.getFemaleFlag());
				stmt.bindString(count++, "0");

				count = 1;
               
				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("TransplantationDAO  -- insert", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean delete(SQLiteDatabase dbObject, DTO dto) {
		TransplantationDTO dtoObj = (TransplantationDTO) dto;
		try {
			dbObject.compileStatement(
					"DELETE FROM Transplantation WHERE idTransplantation = '"
							+ dtoObj.getIdTransplantation() + "'").execute();

			return true;
		} catch (Exception e) {
			Log.e("TransplantationDAO  -- delete", e.getMessage());
		}

		finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean update(SQLiteDatabase dbObject, DTO dto) {
		try {
			TransplantationDTO dtoObj = (TransplantationDTO) dto;
			String whereCls = "idLand = '" + dtoObj.getIdLand() + "'";
			
			ContentValues cValues = new ContentValues();
			cValues.put("dotMale",dtoObj.getDotMale());
			cValues.put("dotFemale", dtoObj.getDotFemale());
			cValues.put("idRemarks", dtoObj.getIdRemarks());
			cValues.put("otherRemarks", dtoObj.getOtherRemarks());
			cValues.put("idAgronomicalCondition", dtoObj.getIdAgronomicalCondition());
			cValues.put("transplantationAcres", dtoObj.getTransplantationAcres());
			cValues.put("photo", dtoObj.getPhoto());
			cValues.put("yeildEstimation", dtoObj.getYeildEstimation());
			//cValues.put("dateCreated", dtoObj.getDateCreated());
			cValues.put("dateModified", dtoObj.getDateModified());
			cValues.put("dateCompletion", dtoObj.getDateCompletion());
			cValues.put("maleFlag", dtoObj.getMaleFlag());
			cValues.put("femaleFlag", dtoObj.getFemaleFlag());
			cValues.put("syncFlag", dtoObj.getSyncFlag());
			
			dbObject.update("Transplantation", cValues, whereCls, null);
  
			return true;
		} catch (SQLException e) {
			Log.e("TransplantationDAO  -- update", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public List<DTO> getRecords(SQLiteDatabase dbObject) {
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM Transplantation", null);
			if (cursor.moveToFirst()) {
				do {
					
					TransplantationDTO dto = new TransplantationDTO();
					
					dto.setIdTransplantation(cursor.getString(count++));
					dto.setIdLand(cursor.getString(count++));
					dto.setDotMale(cursor.getString(count++));
					dto.setDotFemale(cursor.getString(count++));
					dto.setIdRemarks(cursor.getString(count++));
					dto.setOtherRemarks(cursor.getString(count++));
					dto.setIdAgronomicalCondition(cursor.getString(count++));
					dto.setTransplantationAcres(cursor.getString(count++));
					dto.setPhoto(cursor.getString(count++));
					dto.setYeildEstimation(cursor.getString(count++));
					dto.setDateCreated(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));
					dto.setDateCompletion(cursor.getString(count++));
					dto.setMaleFlag(cursor.getInt(count++));
					dto.setFemaleFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("TransplantationDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}

	@Override
	public List<DTO> getRecordsWithValues(SQLiteDatabase dbObject,String columnName, String columnValue)
	{
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM Transplantation WHERE "
					+ columnName + " = '" + columnValue + "'", null);
			if (cursor.moveToFirst()) {
				do {
					TransplantationDTO dto = new TransplantationDTO();
					dto.setIdTransplantation(cursor.getString(count++));
					dto.setIdLand(cursor.getString(count++));
					dto.setDotMale(cursor.getString(count++));
					dto.setDotFemale(cursor.getString(count++));
					dto.setIdRemarks(cursor.getString(count++));
					dto.setOtherRemarks(cursor.getString(count++));
					dto.setIdAgronomicalCondition(cursor.getString(count++));
					dto.setTransplantationAcres(cursor.getString(count++));
					dto.setPhoto(cursor.getString(count++));
					dto.setYeildEstimation(cursor.getString(count++));
					dto.setDateCreated(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));
					dto.setDateCompletion(cursor.getString(count++));
					dto.setMaleFlag(cursor.getInt(count++));
					dto.setFemaleFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));

					instList.add(dto);
					
					count	= 0;
					
				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("TransplantationDAO  -- getRecordsWithValues", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();
			dbObject.close();
		}

		return instList;
	}

	public String getTransplantationAcres(SQLiteDatabase dbObject, String idLand)
	 {
	  String standingAcres = "";
	  
	  Cursor cursor = null;
	  try {
		  String qry = "SELECT transplantationAcres FROM Transplantation where idLand='"+idLand+"'";
	   cursor = dbObject.rawQuery(qry, null);
	   if (cursor.moveToFirst()) {
	    do {
	    	standingAcres = cursor.getString(0);

	    } while (cursor.moveToNext());
	   }
	  } catch (Exception e) {
	   Log.e("HarvestingDAO  -- getHarvestAcres", e.getMessage());
	  } finally {
	   if (cursor != null && !cursor.isClosed())
	    cursor.close();

	   dbObject.close();
	  }

	  return standingAcres;
	 }
	
	public boolean insertAll(SQLiteDatabase dbObject, List<TransplantationDTO> list,String tablename) {
		try {
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO "+tablename+"(idTransplantation,idLand,dotMale,dotFemale,idRemarks,otherRemarks,idAgronomicalCondition,transplantationAcres,photo,yeildEstimation,dateCreated,dateModified,dateCompletion,maleFlag,femaleFlag,syncFlag)VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
			int count = 1;

			for (TransplantationDTO dto : list) {
				
				stmt.bindString(count++, dto.getIdTransplantation());
				stmt.bindString(count++, dto.getIdLand());
			
				stmt.bindString(count++, dto.getDotMale()						== null ? "" : dto.getDotMale());
				stmt.bindString(count++, dto.getDotFemale() 					== null ? "" : dto.getDotFemale());
				stmt.bindString(count++, dto.getIdRemarks() 					== null ? "" : dto.getIdRemarks());
				stmt.bindString(count++, dto.getOtherRemarks()					== null ? "" : dto.getOtherRemarks());
				stmt.bindString(count++, dto.getIdAgronomicalCondition()		== null ? "" : dto.getIdAgronomicalCondition());
				stmt.bindString(count++, dto.getTransplantationAcres()			== null ? "" : dto.getTransplantationAcres());
				stmt.bindString(count++, dto.getPhoto()							== null ? "" : dto.getPhoto());
				stmt.bindString(count++, dto.getYeildEstimation()				== null ? "" : dto.getYeildEstimation());
				stmt.bindString(count++, dto.getDateCreated()					== null ? "" : dto.getDateCreated());
				stmt.bindString(count++, dto.getDateModified()					== null ? "" : dto.getDateModified());
				stmt.bindString(count++, dto.getDateCompletion()				== null ? "" : dto.getDateCompletion());
				stmt.bindLong(count++, dto.getMaleFlag()						== null ? 0 : dto.getMaleFlag());
				stmt.bindLong(count++, dto.getFemaleFlag()						== null ? 0 : dto.getFemaleFlag());
				stmt.bindLong(count++, dto.getSyncFlag()						== null ? 1 : dto.getSyncFlag());

				count = 1;
               
				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("TransplantationDAO  -- insert", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}
	
	public List<TransplantationDTO> getTransactionalData(SQLiteDatabase dbObject) {
		List<TransplantationDTO> instList = new ArrayList<TransplantationDTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM Transplantation where syncFlag='0'", null);
			if (cursor.moveToFirst()) {
				do {
					TransplantationDTO dto = new TransplantationDTO();
					dto.setIdTransplantation(cursor.getString(count++));
					dto.setIdLand(cursor.getString(count++));
					dto.setDotMale(cursor.getString(count++));
					dto.setDotFemale(cursor.getString(count++));
					dto.setIdRemarks(cursor.getString(count++));
					dto.setOtherRemarks(cursor.getString(count++));
					dto.setIdAgronomicalCondition(cursor.getString(count++));
					dto.setTransplantationAcres(cursor.getString(count++));
					dto.setPhoto(cursor.getString(count++));
					dto.setYeildEstimation(cursor.getString(count++));
					dto.setDateCreated(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));
					dto.setDateCompletion(cursor.getString(count++));
					dto.setMaleFlag(cursor.getInt(count++));
					dto.setFemaleFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("TransplantationDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}
	
	public boolean updateTransactionalData(SQLiteDatabase dbObject)
	{
		try {

			String query ="UPDATE  Transplantation  set syncFlag='1'";
			dbObject.execSQL(query);    
			return true;
			
		} catch (SQLException e) {
			Log.e("TransplantationDAO  -- update", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}
	
	public List<TransplantationDTO> getCompleteData(SQLiteDatabase dbObject) {
		List<TransplantationDTO> instList = new ArrayList<TransplantationDTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM Transplantation", null);
			if (cursor.moveToFirst()) {
				do {
					TransplantationDTO dto = new TransplantationDTO();
					dto.setIdTransplantation(cursor.getString(count++));
					dto.setIdLand(cursor.getString(count++));
					dto.setDotMale(cursor.getString(count++));
					dto.setDotFemale(cursor.getString(count++));
					dto.setIdRemarks(cursor.getString(count++));
					dto.setOtherRemarks(cursor.getString(count++));
					dto.setIdAgronomicalCondition(cursor.getString(count++));
					dto.setTransplantationAcres(cursor.getString(count++));
					dto.setPhoto(cursor.getString(count++));
					dto.setYeildEstimation(cursor.getString(count++));
					dto.setDateCreated(cursor.getString(count++));
					dto.setDateModified(cursor.getString(count++));
					dto.setDateCompletion(cursor.getString(count++));
					dto.setMaleFlag(cursor.getInt(count++));
					dto.setFemaleFlag(cursor.getInt(count++));
					dto.setSyncFlag(cursor.getInt(count++));

					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("TransplantationDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}
	
	public boolean insertPartialData(SQLiteDatabase dbObject) {
		try {
			String query ="INSERT OR REPLACE INTO Transplantation(idTransplantation,idLand,dotMale,dotFemale,idRemarks,otherRemarks,idAgronomicalCondition,transplantationAcres,photo,yeildEstimation,dateCreated,dateModified,dateCompletion,maleFlag,femaleFlag,syncFlag) SELECT t.idTransplantation,t.idLand,t.dotMale,t.dotFemale,t.idRemarks,t.otherRemarks,t.idAgronomicalCondition,t.transplantationAcres,t.photo,t.yeildEstimation,t.dateCreated,t.dateModified,t.dateCompletion,t.maleFlag,t.femaleFlag,t.syncFlag  FROM Transplantation_Temp t left join Transplantation o on o.idTransplantation=t.idTransplantation";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("TransplantationDAO  -- insertPartial", e.getMessage());
		} finally {
			//dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}
	
	public boolean deleteAll(SQLiteDatabase dbObject) {
		try {
			String query ="DELETE   FROM Transplantation_Temp";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("TransplantationDAO  -- deleteall", e.getMessage());
		} finally {
			
			dbObject.close();
		}
		return false;
		
	}
}
