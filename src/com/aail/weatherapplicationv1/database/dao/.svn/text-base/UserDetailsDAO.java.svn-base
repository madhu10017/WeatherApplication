/**
 * 
 */
package com.bayer.efm.hsp.database.dao;

import java.util.ArrayList;
import java.util.List;

import net.sqlcipher.database.SQLiteDatabase;
import net.sqlcipher.database.SQLiteStatement;
import android.content.ContentValues;
import net.sqlcipher.Cursor;
import net.sqlcipher.SQLException;
import android.util.Log;

import com.bayer.efm.hsp.database.dto.DTO;
import com.bayer.efm.hsp.database.dto.UserDetailsDTO;

public class UserDetailsDAO implements DAO {

	private static UserDetailsDAO userdetailsDAO;

	private UserDetailsDAO() {

	}

	public static UserDetailsDAO getInstance() {
		if (userdetailsDAO == null)
			userdetailsDAO = new UserDetailsDAO();

		return userdetailsDAO;
	}

	@Override
	public boolean insert(SQLiteDatabase dbObject, List<DTO> list) {
		try {
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO UserDetails(iduser,userName,password,userType,macId,token,idSeason,lastLogin,block,territory,region,zone,district,sQuestion,sAnswer)VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

			int count = 1;

			for (DTO items : list) {

				UserDetailsDTO dto = (UserDetailsDTO) items;
				stmt.bindString(count++, dto.getIduser());
				stmt.bindString(count++, dto.getUserName());
				stmt.bindString(count++, dto.getPassword());
				stmt.bindString(count++, dto.getUserType());
				stmt.bindString(count++, dto.getMacId());
				stmt.bindString(count++, dto.getToken());
				stmt.bindString(count++, dto.getIdSeason());
				stmt.bindString(count++, dto.getLastLogin());
				stmt.bindString(count++, dto.getBlock());
				stmt.bindString(count++, dto.getTerritory());
				stmt.bindString(count++, dto.getRegion());
				stmt.bindString(count++, dto.getZone());
				stmt.bindString(count++, dto.getSecurityQuestion());
				stmt.bindString(count++, dto.getSecurityAnswer());
				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("UserDetailsDAO  -- insert", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean delete(SQLiteDatabase dbObject, DTO dto) {
		UserDetailsDTO dtoObj = (UserDetailsDTO) dto;
		try {
			dbObject.compileStatement(
					"DELETE FROM UserDetails WHERE iduser = '"
							+ dtoObj.getIduser() + "'").execute();

			return true;
		} catch (Exception e) {
			Log.e("UserDetailsDAO  -- delete", e.getMessage());
		}

		finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public boolean update(SQLiteDatabase dbObject, DTO dto) {
		try {
			UserDetailsDTO dtoObj = (UserDetailsDTO) dto;
			String whereCls = "iduser = '" + dtoObj.getIduser() + "'";

			ContentValues cValues = new ContentValues();
			dbObject.update("UserDetails", cValues, whereCls, null);

			return true;
		} catch (SQLException e) {
			Log.e("UserDetailsDAO  -- update", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}

	@Override
	public List<DTO> getRecords(SQLiteDatabase dbObject) {
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM UserDetails", null);
			if (cursor.moveToFirst()) {
				do {
					UserDetailsDTO dto = new UserDetailsDTO();
					dto.setIduser(cursor.getString(count++));
					dto.setUserName(cursor.getString(count++));
					dto.setPassword(cursor.getString(count++));
					dto.setUserType(cursor.getString(count++));
					dto.setMacId(cursor.getString(count++));
					dto.setToken(cursor.getString(count++));
					dto.setIdSeason(cursor.getString(count++));
					dto.setLastLogin(cursor.getString(count++));
					dto.setBlock(cursor.getString(count++));
					dto.setTerritory(cursor.getString(count++));
					dto.setRegion(cursor.getString(count++));
					dto.setZone(cursor.getString(count++));
					dto.setDistrict(cursor.getString(count++));
					dto.setSecurityQuestion(cursor.getString(count++));
					dto.setSecurityAnswer(cursor.getString(count++));
					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("UserDetailsDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}

	@Override
	public List<DTO> getRecordsWithValues(SQLiteDatabase dbObject,
			String columnName, String columnValue) {
		List<DTO> instList = new ArrayList<DTO>();
		Cursor cursor = null;
		
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM UserDetails WHERE "
					+ columnName + " = '" + columnValue + "'", null);
			if (cursor.moveToFirst()) {
				do {
					UserDetailsDTO dto = new UserDetailsDTO();
					dto.setIduser(cursor.getString(count++));
					dto.setUserName(cursor.getString(count++));
					dto.setPassword(cursor.getString(count++));
					dto.setUserType(cursor.getString(count++));
					dto.setMacId(cursor.getString(count++));
					dto.setToken(cursor.getString(count++));
					dto.setIdSeason(cursor.getString(count++));
					dto.setLastLogin(cursor.getString(count++));
					dto.setBlock(cursor.getString(count++));
					dto.setTerritory(cursor.getString(count++));
					dto.setRegion(cursor.getString(count++));
					dto.setZone(cursor.getString(count++));
					dto.setSecurityQuestion(cursor.getString(count++));
					dto.setSecurityAnswer(cursor.getString(count++));
					instList.add(dto);
					
					count	= 0;
					
				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("UserDetailsDAO  -- getRecordsWithValues", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();
			dbObject.close();
		}

		return instList;
	}
	
	public boolean insertAll(SQLiteDatabase dbObject, List<UserDetailsDTO> list,String tablename) {
		try {
			dbObject.beginTransaction();
			SQLiteStatement stmt = dbObject
					.compileStatement("INSERT INTO "+tablename+"(iduser,userName,password,userType,macId,token,idSeason,lastLogin,block,territory,region,zone,district,sQuestion,sAnswer)VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
			int count = 1;

			for (UserDetailsDTO dto : list) {
				
				
				
				stmt.bindString(count++, dto.getIduser());
				stmt.bindString(count++, dto.getUserName());
				stmt.bindString(count++, dto.getPassword());
				stmt.bindString(count++, dto.getUserType() == null ? "" : dto.getUserType());
				stmt.bindString(count++, dto.getMacId());
				stmt.bindString(count++, ""); //Token id will directly come from the web: dto.getToken()
				stmt.bindString(count++, dto.getIdSeason() == null ? "" : dto.getIdSeason());
				stmt.bindString(count++, ""); //dto.getLastLogin()
				stmt.bindString(count++, dto.getBlock() == null ? "" : dto.getBlock());
				stmt.bindString(count++, dto.getTerritory() == null ? "" : dto.getTerritory());
				stmt.bindString(count++, dto.getRegion() == null ? "" : dto.getRegion());
				stmt.bindString(count++, dto.getZone() == null ? "" : dto.getZone());
				stmt.bindString(count++, dto.getDistrict() == null ? "" : dto.getDistrict());
				stmt.bindString(count++, dto.getSecurityQuestion() == null ? ""
						: dto.getSecurityQuestion());
				stmt.bindString(count++, dto.getSecurityAnswer() == null ? ""
						: dto.getSecurityAnswer());
				count = 1;

				stmt.executeInsert();
			}

			dbObject.setTransactionSuccessful();
			return true;
		} catch (Exception e) {
			Log.e("UserDetailsDAO  -- insertAll", e.getMessage());
		} finally {
			dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}
	public boolean updatePartialData(SQLiteDatabase dbObject) {
		try {
			//iduser,userName,password,macId,token,lastLogin,block,territory,region,zone
			String query ="UPDATE  UserDetails o set o.userName=t.userName,o.password=t.password,o.userType=t.userType,o.macId=t.macId,o.token=t.token,o.idSeason=t.idSeason,o.lastLogin=t.lastLogin,o.block=t.block,o.territory=t.territory,o.region=t.region,o.zone=t.zone,t.sQuestion,t.sAnswer from UserDetails_Temp t where o.iduser=t.iduser";
			Cursor cu = dbObject.rawQuery(query,null);
			cu.moveToFirst();
			cu.close();     
			return true;
			
		} catch (SQLException e) {
			Log.e("UserDetailsDAO  -- updatePartial", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}
	
	public boolean insertPartialData(SQLiteDatabase dbObject) {
		try {
			String query ="INSERT OR REPLACE INTO UserDetails(iduser,userName,password,userType,macId,token,idSeason,lastLogin,block,territory,region,zone,sQuestion,sAnswer) SELECT t.iduser,t.userName,t.password,t.userType,t.macId,t.token,t.idSeason,t.lastLogin,t.block,t.territory,t.region,t.zone,t.sQuestion,t.sAnswer  FROM UserDetails_Temp t left join UserDetails o on o.iduser=t.iduser";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("UserDetailsDAO  -- insertPartial", e.getMessage());
		} finally {
			//dbObject.endTransaction();
			dbObject.close();
		}
		return false;
	}
	
	public boolean deleteAll(SQLiteDatabase dbObject) {
		try {
			String query ="DELETE FROM UserDetails_Temp";
			dbObject.execSQL(query);
     
		
			return true;
		} catch (Exception e) {
			Log.e("UserDetailsDAO  -- deleteall", e.getMessage());
		} finally {
			
			dbObject.close();
		}
		return false;
		
	}
	
	public List<UserDetailsDTO> getCompleteData(SQLiteDatabase dbObject) {
		List<UserDetailsDTO> instList = new ArrayList<UserDetailsDTO>();
		Cursor cursor = null;
		int count	= 0;
		
		try {
			cursor = dbObject.rawQuery("SELECT * FROM UserDetails ", null);
			if (cursor.moveToFirst()) {
				do {
					UserDetailsDTO dto = new UserDetailsDTO();
					dto.setIduser(cursor.getString(count++));
					dto.setUserName(cursor.getString(count++));
					dto.setPassword(cursor.getString(count++));
					dto.setUserType(cursor.getString(count++));
					dto.setMacId(cursor.getString(count++));
					dto.setToken(cursor.getString(count++));
					dto.setIdSeason(cursor.getString(count++));
					dto.setLastLogin(cursor.getString(count++));
					dto.setBlock(cursor.getString(count++));
					dto.setTerritory(cursor.getString(count++));
					dto.setRegion(cursor.getString(count++));
					dto.setZone(cursor.getString(count++));
					dto.setDistrict(cursor.getString(count++));
					dto.setSecurityQuestion(cursor.getString(count++));
					dto.setSecurityAnswer(cursor.getString(count++));
					instList.add(dto);
					
					count	= 0;

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("UserDetailsDAO  -- getRecords", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return instList;
	}
	
	
	public String getIdUser(SQLiteDatabase dbObject) 
	{
		String idUser = null;
		Cursor cursor = null;
		try {
			String qry = "SELECT idUser FROM UserDetails";
			cursor = dbObject.rawQuery(qry, null);
			if (cursor.moveToFirst()) 
			{
				do {
					idUser = cursor.getString(0);

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("UserDetailsDAO  -- getMaxLandCode", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return idUser;
	}
	
	public String getUserType(SQLiteDatabase dbObject) 
	{
		String userType = "";
		Cursor cursor = null;
		
		try 
		{
			String qry 	= "SELECT userType FROM UserDetails";
			cursor 		= dbObject.rawQuery(qry, null);
			if (cursor.moveToFirst()) 
			{
				do {
					userType = cursor.getString(0);

				} while (cursor.moveToNext());
			}
		} catch (Exception e) {
			Log.e("UserDetailsDAO  -- getUserType", e.getMessage());
		} finally {
			if (cursor != null && !cursor.isClosed())
				cursor.close();

			dbObject.close();
		}

		return userType;
	}
	public boolean updatePwd(SQLiteDatabase dbObject, String username, String newPwd) {
		try {
			
			ContentValues cValues = new ContentValues();
			cValues.put("password", newPwd);
			
			// UserDetailsDTO dtoObj = (UserDetailsDTO) dto;
			String whereCls = "userName = '" + username + "'";

			// ContentValues cValues = new ContentValues();
			dbObject.update("UserDetails", cValues, whereCls, null);

			return true;
		} catch (SQLException e) {
			Log.e("UserDetailsDAO  -- updatePwd", e.getMessage());
		} finally {
			dbObject.close();
		}
		return false;
	}
}
